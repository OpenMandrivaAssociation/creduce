From 4ae77d1e101135a6aea310b30c19e2af968b7bf6 Mon Sep 17 00:00:00 2001
From: Yang Chen <chenyang@cs.utah.edu>
Date: Sun, 16 Jan 2022 23:57:44 -0800
Subject: [PATCH] built with llvm-13.0 release

---
 clang_delta/RemoveNamespace.cpp         | 5 ++++-
 clang_delta/RemoveNestedFunction.cpp    | 5 +++--
 clang_delta/RewriteUtils.cpp            | 2 +-
 clang_delta/TemplateNonTypeArgToInt.cpp | 4 +++-
 clang_delta/Transformation.cpp          | 5 +++--
 5 files changed, 14 insertions(+), 7 deletions(-)

diff --git a/clang_delta/RemoveNamespace.cpp b/clang_delta/RemoveNamespace.cpp
index 52ed6d89..400e934b 100644
--- a/clang_delta/RemoveNamespace.cpp
+++ b/clang_delta/RemoveNamespace.cpp
@@ -794,7 +794,10 @@ void RemoveNamespace::handleOneUsingShadowDecl(const UsingShadowDecl *UD,
     return;
 
   std::string NewName;
-  const UsingDecl *D = UD->getUsingDecl();
+  const BaseUsingDecl *BD = UD->getIntroducer();
+  const UsingDecl *D = dyn_cast<UsingDecl>(BD);
+  if (!D)
+    return;
 
   NestedNameSpecifierLoc QualifierLoc = D->getQualifierLoc();
   NestedNameSpecifier *NNS = QualifierLoc.getNestedNameSpecifier();
diff --git a/clang_delta/RemoveNestedFunction.cpp b/clang_delta/RemoveNestedFunction.cpp
index 5faf5d95..f3ebc1cf 100644
--- a/clang_delta/RemoveNestedFunction.cpp
+++ b/clang_delta/RemoveNestedFunction.cpp
@@ -190,12 +190,13 @@ void RemoveNestedFunction::getVarStrForTemplateSpecialization(
 
   std::string ArgStr;
   llvm::raw_string_ostream Stream(ArgStr);
-  TST->getArg(0).print(Context->getPrintingPolicy(), Stream);
+  TST->getArg(0).print(Context->getPrintingPolicy(), Stream,
+                       /*IncludeType*/ true);
 
   for (unsigned I = 1; I < NumArgs; ++I) {
     const TemplateArgument &Arg = TST->getArg(I);
     Stream << ", ";
-    Arg.print(Context->getPrintingPolicy(), Stream);
+    Arg.print(Context->getPrintingPolicy(), Stream, /*IncludeType*/ true);
   }
   size_t BeginPos = VarStr.find_first_of('<');
   size_t EndPos = VarStr.find_last_of('>');
diff --git a/clang_delta/RewriteUtils.cpp b/clang_delta/RewriteUtils.cpp
index de3ec67c..9a07007c 100644
--- a/clang_delta/RewriteUtils.cpp
+++ b/clang_delta/RewriteUtils.cpp
@@ -554,7 +554,7 @@ bool RewriteUtils::removeVarFromDeclStmt(DeclStmt *DS,
   // in this case, struct S0 is implicitly declared
   if (PrevDecl) {
     if ( RecordDecl *RD = dyn_cast<RecordDecl>(PrevDecl) ) {
-      DeclGroup DGroup = DS->getDeclGroup().getDeclGroup();
+      const DeclGroup &DGroup = DS->getDeclGroup().getDeclGroup();
       IsFirstDecl = true;
       if ((!RD->getDefinition() || RD->getNameAsString() == "") &&
           DGroup.size() == 2) {
diff --git a/clang_delta/TemplateNonTypeArgToInt.cpp b/clang_delta/TemplateNonTypeArgToInt.cpp
index 87e60075..ec951d2a 100644
--- a/clang_delta/TemplateNonTypeArgToInt.cpp
+++ b/clang_delta/TemplateNonTypeArgToInt.cpp
@@ -167,7 +167,9 @@ void TemplateNonTypeArgToInt::handleOneTemplateArgumentLoc(
     if (!TheExpr->isValueDependent() &&
         TheExpr->EvaluateAsInt(Result, *Context)) {
       llvm::APSInt IVal = Result.Val.getInt();
-      IntString = IVal.toString(10);
+      llvm::SmallString<8> TmpStr;
+      IVal.toString(TmpStr, 10);
+      IntString = TmpStr.str().str();
     }
   }
 }
diff --git a/clang_delta/Transformation.cpp b/clang_delta/Transformation.cpp
index 782b9127..0bd58218 100644
--- a/clang_delta/Transformation.cpp
+++ b/clang_delta/Transformation.cpp
@@ -397,8 +397,9 @@ const Expr *Transformation::getBaseExprAndIdxs(const Expr *E,
       // If we cannot have an integeral index, use 0.
       if (IdxE && IdxE->EvaluateAsInt(Result, *Context)) {
         llvm::APSInt IVal = Result.Val.getInt();
-        std::string IntStr = IVal.toString(10);
-        std::stringstream TmpSS(IntStr);
+        llvm::SmallString<8> IntStr;
+        IVal.toString(IntStr, 10);
+        std::stringstream TmpSS(IntStr.str().str());
         if (!(TmpSS >> Idx))
           TransAssert(0 && "Non-integer value!");
       }
