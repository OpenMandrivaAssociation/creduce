From 4c74487fcde78a129e792b39ab99498e073ae426 Mon Sep 17 00:00:00 2001
From: Yang Chen <chenyang@cs.utah.edu>
Date: Sat, 27 Mar 2021 01:49:03 -0700
Subject: [PATCH] added a number of tests for simple-inliner pass

---
 clang_delta/tests/simple-inliner/inline1.cc | 12 +++++++
 clang_delta/tests/simple-inliner/inline2.cc | 17 +++++++++
 clang_delta/tests/simple-inliner/inline3.cc | 18 ++++++++++
 clang_delta/tests/simple-inliner/inline4.cc | 25 ++++++++++++++
 clang_delta/tests/simple-inliner/inline5.cc | 29 ++++++++++++++++
 clang_delta/tests/simple-inliner/inline6.cc | 27 +++++++++++++++
 clang_delta/tests/simple-inliner/inline7.cc | 38 +++++++++++++++++++++
 clang_delta/tests/simple-inliner/inline8.cc | 15 ++++++++
 8 files changed, 181 insertions(+)
 create mode 100644 clang_delta/tests/simple-inliner/inline1.cc
 create mode 100644 clang_delta/tests/simple-inliner/inline2.cc
 create mode 100644 clang_delta/tests/simple-inliner/inline3.cc
 create mode 100644 clang_delta/tests/simple-inliner/inline4.cc
 create mode 100644 clang_delta/tests/simple-inliner/inline5.cc
 create mode 100644 clang_delta/tests/simple-inliner/inline6.cc
 create mode 100644 clang_delta/tests/simple-inliner/inline7.cc
 create mode 100644 clang_delta/tests/simple-inliner/inline8.cc

diff --git a/clang_delta/tests/simple-inliner/inline1.cc b/clang_delta/tests/simple-inliner/inline1.cc
new file mode 100644
index 00000000..64058e5a
--- /dev/null
+++ b/clang_delta/tests/simple-inliner/inline1.cc
@@ -0,0 +1,12 @@
+// RUN: %clang_delta --transformation=simple-inliner --counter=1 %s 2>&1 | %remove_lit_checks | FileCheck %s
+
+#include <iostream>
+// CHECK: #include <iostream>
+template <typename x0> struct A { static void m_fn1(x0); };
+// CHECK: template <typename x0> struct A { static void m_fn1(x0); };
+template <typename x0> void A<x0>::m_fn1(x0 p1) { std::cout << p1; }
+// CHECK-NOT: A<x0>::m_fn1
+int main() { A<char *>::m_fn1("Hello"); }
+// CHECK: int main() {{{[[:space:]]}}{char *p1 = "Hello";
+// CHECK: std::cout << p1; }
+// }
diff --git a/clang_delta/tests/simple-inliner/inline2.cc b/clang_delta/tests/simple-inliner/inline2.cc
new file mode 100644
index 00000000..0c83c42c
--- /dev/null
+++ b/clang_delta/tests/simple-inliner/inline2.cc
@@ -0,0 +1,17 @@
+// RUN: %clang_delta --transformation=simple-inliner --counter=1 %s 2>&1 | %remove_lit_checks | FileCheck %s
+
+// CHECK-NOT: bar() {
+int bar() {
+  int y = 0;
+  return y;
+}
+void foo() {
+  int x = bar();
+}
+
+// CHECK: void foo() {
+// CHECK: int [[VAR:.*]];
+// CHECK: int y = 0;
+// CHECK: [[VAR]] =  y;
+// CHECK: int x = [[VAR]];
+// CHECK: }
diff --git a/clang_delta/tests/simple-inliner/inline3.cc b/clang_delta/tests/simple-inliner/inline3.cc
new file mode 100644
index 00000000..c316795d
--- /dev/null
+++ b/clang_delta/tests/simple-inliner/inline3.cc
@@ -0,0 +1,18 @@
+// RUN: %clang_delta --transformation=simple-inliner --counter=1 %s 2>&1 | %remove_lit_checks | FileCheck %s
+
+// CHECK-NOT: template
+template <typename T>
+// CHECK-NOT: T bar 
+T bar(T a) {
+  return a;
+}
+void foo() {
+  int x = bar<int>(1);
+}
+
+// CHECK: void foo() {
+// CHECK: int [[VAR:.*]];
+// CHECK: int a = 1;
+// CHECK: [[VAR]] =  a;
+// CHECK: int x = [[VAR]];
+// CHECK: }
diff --git a/clang_delta/tests/simple-inliner/inline4.cc b/clang_delta/tests/simple-inliner/inline4.cc
new file mode 100644
index 00000000..c9673fbc
--- /dev/null
+++ b/clang_delta/tests/simple-inliner/inline4.cc
@@ -0,0 +1,25 @@
+// RUN: %clang_delta --transformation=simple-inliner --counter=1 %s 2>&1 | %remove_lit_checks | FileCheck %s
+
+// CHECK: struct S {
+struct S {
+// CHECK-NOT: template
+  template <typename T>
+// CHECK-NOT: T bar 
+  T bar(T a) {
+    return a;
+  }
+// CHECK: };
+};
+
+void foo() {
+  S s;
+  int x = s.bar<int>(1);
+}
+
+// CHECK: void foo() {
+// CHECK: int [[VAR:.*]];
+// CHECK: S s;
+// CHECK: int a = 1;
+// CHECK: [[VAR]] =  a;
+// CHECK: int x = [[VAR]];
+// CHECK: }
diff --git a/clang_delta/tests/simple-inliner/inline5.cc b/clang_delta/tests/simple-inliner/inline5.cc
new file mode 100644
index 00000000..766614fa
--- /dev/null
+++ b/clang_delta/tests/simple-inliner/inline5.cc
@@ -0,0 +1,29 @@
+// RUN: %clang_delta --transformation=simple-inliner --counter=1 %s 2>&1 | %remove_lit_checks | FileCheck %s
+
+int printf(const char *format, ...);
+void foo(int *p) {
+  int *l = p;
+  *p = 123;
+}
+int main() {
+  int x = 0;
+  int *p = &x;
+  foo(p);
+  printf("%d\n", *p);
+  return 0;
+}
+
+// CHECK: int printf(const char *format, ...);
+// CHECK-NOT: void foo(int *p)
+// CHECK: int main() {
+// CHECK:   int x = 0;
+// CHECK:   int *p = &x;
+// CHECK:   {
+// CHECK:   int *[[VAR:.*]] = p;
+// CHECK:   {int *p = [[VAR]];
+// CHECK:    int *l = p;
+// CHECK:    *p = 123;
+// CHECK:   }}
+// CHECK:   printf("%d\n", *p);
+// CHECK:  return 0;
+// CHECK: }
diff --git a/clang_delta/tests/simple-inliner/inline6.cc b/clang_delta/tests/simple-inliner/inline6.cc
new file mode 100644
index 00000000..b14720ef
--- /dev/null
+++ b/clang_delta/tests/simple-inliner/inline6.cc
@@ -0,0 +1,27 @@
+// RUN: %clang_delta --transformation=simple-inliner --counter=1 %s 2>&1 | %remove_lit_checks | FileCheck %s
+
+// CHECK: int printf(const char *format, ...);
+int printf(const char *format, ...);
+// CHECK-NOT: foo(int p)
+void foo(int p) {
+  int *l = &p;
+  *l = 123;
+}
+int main() {
+  int p = 0;
+  foo(p);
+  printf("%d\n", p);
+  return 0;
+}
+
+// CHECK: int main() {
+// CHECK: int p = 0;
+// CHECK: {
+// CHECK:  int [[VAR:.*]] = p;
+// CHECK: {int p = [[VAR]];
+// CHECK:  int *l = &p;
+// CHECK:  *l = 123;
+// CHECK: }}
+// CHECK:  printf("%d\n", p);
+// CHECK:  return 0;
+// CHECK: }
diff --git a/clang_delta/tests/simple-inliner/inline7.cc b/clang_delta/tests/simple-inliner/inline7.cc
new file mode 100644
index 00000000..d77075e4
--- /dev/null
+++ b/clang_delta/tests/simple-inliner/inline7.cc
@@ -0,0 +1,38 @@
+// RUN: %clang_delta --transformation=simple-inliner --counter=1 %s 2>&1 | %remove_lit_checks | FileCheck %s
+
+struct S2 {
+  int g_313;
+  char g_350;
+};
+// CHECK: struct S2 {
+// CHECK:   int g_313;
+// CHECK:   char g_350;
+// CHECK: };
+
+// CHECK-NOT: func_1
+void func_1(struct S2 *p_886) {
+  char *l_349 = &p_886->g_350;
+  *l_349 = ((short)p_886->g_313 >= 6UL);
+}
+void entry(long *result, int sequence_input) {
+  struct S2 c_887;
+  struct S2 *p_886 = &c_887;
+  struct S2 c_888 = {-8L};
+  c_887 = c_888;
+  func_1(p_886);
+  result[0] = p_886->g_350;
+}
+
+// CHECK: void entry(long *result, int sequence_input) {
+// CHECK:   struct S2 c_887;
+// CHECK:   struct S2 *p_886 = &c_887;
+// CHECK:   struct S2 c_888 = {-8L};
+// CHECK:   c_887 = c_888;
+// CHECK:   {
+// CHECK:   struct S2 *[[VAR:.*]] = p_886;
+// CHECK:   {struct S2 *p_886 = [[VAR]];
+// CHECK:     char *l_349 = &p_886->g_350;
+// CHECK:     *l_349 = ((short)p_886->g_313 >= 6UL);
+// CHECK:   }}
+// CHECK:   result[0] = p_886->g_350;
+// CHECK: }
diff --git a/clang_delta/tests/simple-inliner/inline8.cc b/clang_delta/tests/simple-inliner/inline8.cc
new file mode 100644
index 00000000..9f568d94
--- /dev/null
+++ b/clang_delta/tests/simple-inliner/inline8.cc
@@ -0,0 +1,15 @@
+// RUN: %clang_delta --transformation=simple-inliner --counter=1 %s 2>&1 | %remove_lit_checks | FileCheck %s
+
+// CHECK-NOT: void foo()
+void foo()
+{
+
+}
+
+#define MACRO foo()
+
+void bar() {
+  MACRO;
+}
+// CHECK: void bar() {
+// CHECK: }
