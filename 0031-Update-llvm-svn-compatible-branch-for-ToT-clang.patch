From d3683354d3024c78949ca3d382433586b9bff216 Mon Sep 17 00:00:00 2001
From: Reid Kleckner <rnk@google.com>
Date: Tue, 26 Feb 2019 15:08:05 -0800
Subject: [PATCH 31/31] Update llvm-svn-compatible branch for ToT clang

- Replace getStartLoc with getBeginLoc
- Replace getLocEnd with getEndLoc
- EvaluateAsInt now produces an Expr::EvalResult instead of APSInt, look
  through it
- Misc minor fixes, const, etc
---
 clang_delta/AggregateToScalar.cpp             |  2 +-
 clang_delta/ClassTemplateToClass.cpp          |  2 +-
 clang_delta/CommonRenameClassRewriteVisitor.h |  6 +++---
 clang_delta/EmptyStructToInt.cpp              |  6 +++---
 clang_delta/ExpressionDetector.cpp            |  2 +-
 clang_delta/InstantiateTemplateParam.cpp      |  2 +-
 .../InstantiateTemplateTypeParamToInt.cpp     |  2 +-
 clang_delta/LocalToGlobal.cpp                 |  2 +-
 clang_delta/ReduceArrayDim.cpp                |  6 +++---
 clang_delta/ReducePointerLevel.cpp            |  2 +-
 clang_delta/RemoveNamespace.cpp               | 12 +++++------
 clang_delta/RemoveNestedFunction.cpp          |  8 ++++----
 clang_delta/RemoveUnusedEnumMember.cpp        |  4 ++--
 clang_delta/RemoveUnusedFunction.cpp          |  8 ++++----
 clang_delta/RemoveUnusedOuterClass.cpp        |  2 +-
 clang_delta/RenameCXXMethod.cpp               |  5 +++--
 clang_delta/RenameFun.cpp                     |  2 +-
 clang_delta/ReplaceCallExpr.cpp               |  4 ++--
 clang_delta/ReplaceDependentTypedef.cpp       |  2 +-
 clang_delta/ReplaceFunctionDefWithDecl.cpp    |  2 +-
 clang_delta/ReplaceOneLevelTypedefType.cpp    |  2 +-
 clang_delta/ReplaceSimpleTypedef.cpp          |  6 +++---
 clang_delta/ReplaceUndefinedFunction.cpp      |  2 +-
 clang_delta/RewriteUtils.cpp                  | 18 ++++++++---------
 clang_delta/SimpleInliner.cpp                 |  4 ++--
 clang_delta/SimplifyDependentTypedef.cpp      |  2 +-
 clang_delta/SimplifyIf.cpp                    |  2 +-
 clang_delta/SimplifyNestedClass.cpp           |  4 ++--
 clang_delta/SimplifyStruct.cpp                |  8 ++++----
 clang_delta/TemplateNonTypeArgToInt.cpp       |  6 +++---
 clang_delta/Transformation.cpp                | 20 +++++++++----------
 clang_delta/VectorToArray.cpp                 |  2 +-
 32 files changed, 79 insertions(+), 78 deletions(-)

diff --git a/clang_delta/AggregateToScalar.cpp b/clang_delta/AggregateToScalar.cpp
index fa0b2d8..9010c40 100644
--- a/clang_delta/AggregateToScalar.cpp
+++ b/clang_delta/AggregateToScalar.cpp
@@ -212,7 +212,7 @@ bool AggregateToScalar::createNewVar(const Expr *RefE, std::string &VarName)
     return addTmpVar(RefE, VarName, NULL);
 
   std::string InitStr;
-  if (InitE->getLocStart().isInvalid()) {
+  if (InitE->getBeginLoc().isInvalid()) {
     const Type *ET = InitE->getType().getTypePtr();
     if (ET->isIntegerType() || ET->isPointerType())
       InitStr = "0"; 
diff --git a/clang_delta/ClassTemplateToClass.cpp b/clang_delta/ClassTemplateToClass.cpp
index 5ec5f12..0bba98c 100644
--- a/clang_delta/ClassTemplateToClass.cpp
+++ b/clang_delta/ClassTemplateToClass.cpp
@@ -247,7 +247,7 @@ void ClassTemplateToClass::rewriteClassTemplateDecls(void)
          E = TheClassTemplateDecl->redecls_end();
        I != E; ++I) {
     const TemplateParameterList *TPList = (*I)->getTemplateParameters();
-    SourceLocation LocStart = (*I)->getLocStart();
+    SourceLocation LocStart = (*I)->getBeginLoc();
     removeTemplateAndParameter(LocStart, TPList);
   }
 }
diff --git a/clang_delta/CommonRenameClassRewriteVisitor.h b/clang_delta/CommonRenameClassRewriteVisitor.h
index 725b8c9..d682ce9 100644
--- a/clang_delta/CommonRenameClassRewriteVisitor.h
+++ b/clang_delta/CommonRenameClassRewriteVisitor.h
@@ -148,7 +148,7 @@ bool CommonRenameClassRewriteVisitor<T>::
     if (!TyInfo)
       return true;
     TypeLoc TyLoc = TyInfo->getTypeLoc();
-    SourceLocation LocStart = TyLoc.getLocStart();
+    SourceLocation LocStart = TyLoc.getBeginLoc();
     TransAssert(LocStart.isValid() && "Invalid Location!");
     TheRewriter->ReplaceText(LocStart, CXXRD->getNameAsString().size(), Name);
   }
@@ -267,7 +267,7 @@ bool CommonRenameClassRewriteVisitor<T>::VisitInjectedClassNameTypeLoc(
 
   std::string Name;
   if (getNewName(CXXRD, Name)) {
-    SourceLocation LocStart = TyLoc.getLocStart();
+    SourceLocation LocStart = TyLoc.getBeginLoc();
     TransAssert(LocStart.isValid() && "Invalid Location!");
 
     TheRewriter->ReplaceText(LocStart, CXXRD->getNameAsString().size(), Name);
@@ -313,7 +313,7 @@ bool CommonRenameClassRewriteVisitor<T>::VisitRecordTypeLoc(RecordTypeLoc RTLoc)
 
   // Avoid duplicated rewrites to Decls from the same DeclGroup, e.g.,
   // struct S s1, s2
-  SourceLocation LocStart = RTLoc.getLocStart();
+  SourceLocation LocStart = RTLoc.getBeginLoc();
   void *LocPtr = LocStart.getPtrEncoding();
   if (VisitedLocs.count(LocPtr))
     return true;
diff --git a/clang_delta/EmptyStructToInt.cpp b/clang_delta/EmptyStructToInt.cpp
index ae15c8a..771e7cf 100644
--- a/clang_delta/EmptyStructToInt.cpp
+++ b/clang_delta/EmptyStructToInt.cpp
@@ -113,7 +113,7 @@ bool EmptyStructToIntRewriteVisitor::VisitRecordTypeLoc(RecordTypeLoc RTLoc)
   const RecordDecl *RD = RTLoc.getDecl();
 
   if (RD->getCanonicalDecl() == ConsumerInstance->TheRecordDecl) {
-    SourceLocation LocStart = RTLoc.getLocStart();
+    SourceLocation LocStart = RTLoc.getBeginLoc();
     void *LocPtr = LocStart.getPtrEncoding();
     if (ConsumerInstance->VisitedLocs.count(LocPtr))
       return true;
@@ -147,11 +147,11 @@ bool EmptyStructToIntRewriteVisitor::VisitElaboratedTypeLoc(
     return true;
   }
 
-  SourceLocation StartLoc = Loc.getLocStart();
+  SourceLocation StartLoc = Loc.getBeginLoc();
   if (StartLoc.isInvalid())
     return true;
   TypeLoc TyLoc = Loc.getNamedTypeLoc();
-  SourceLocation EndLoc = TyLoc.getLocStart();
+  SourceLocation EndLoc = TyLoc.getBeginLoc();
   if (EndLoc.isInvalid())
     return true;
   EndLoc = EndLoc.getLocWithOffset(-1);
diff --git a/clang_delta/ExpressionDetector.cpp b/clang_delta/ExpressionDetector.cpp
index 62d860f..533d14d 100644
--- a/clang_delta/ExpressionDetector.cpp
+++ b/clang_delta/ExpressionDetector.cpp
@@ -672,7 +672,7 @@ static std::string getFormatString(const BuiltinType *BT)
 
 void ExpressionDetector::doRewrite()
 {
-  SourceLocation LocStart = TheStmt->getLocStart();
+  SourceLocation LocStart = TheStmt->getBeginLoc();
   if (shouldAddFunctionDecl(LocStart)) {
     SourceLocation Loc =
       SrcManager->getLocForStartOfFile(SrcManager->getMainFileID());
diff --git a/clang_delta/InstantiateTemplateParam.cpp b/clang_delta/InstantiateTemplateParam.cpp
index 8d70d22..4acdd98 100644
--- a/clang_delta/InstantiateTemplateParam.cpp
+++ b/clang_delta/InstantiateTemplateParam.cpp
@@ -147,7 +147,7 @@ InstantiateTemplateParamRewriteVisitor::VisitTemplateTypeParmTypeLoc(
   // the "typedef typename T2 ..." is treated as 
   //   typedef typename T2::template T2::C<int>::other type;
   // where the second T2 is injected by Clang
-  void *Ptr = Loc.getLocStart().getPtrEncoding();
+  void *Ptr = Loc.getBeginLoc().getPtrEncoding();
   if (ConsumerInstance->VisitedLocs.count(Ptr))
     return true;
   ConsumerInstance->VisitedLocs.insert(Ptr);
diff --git a/clang_delta/InstantiateTemplateTypeParamToInt.cpp b/clang_delta/InstantiateTemplateTypeParamToInt.cpp
index d90b090..b2a3290 100644
--- a/clang_delta/InstantiateTemplateTypeParamToInt.cpp
+++ b/clang_delta/InstantiateTemplateTypeParamToInt.cpp
@@ -184,7 +184,7 @@ InstantiateTemplateTypeParamToIntRewriteVisitor::VisitTemplateTypeParmTypeLoc(
   if (D != ConsumerInstance->TheParameter)
     return true;
 
-  void *Ptr = Loc.getLocStart().getPtrEncoding();
+  void *Ptr = Loc.getBeginLoc().getPtrEncoding();
   if (ConsumerInstance->VisitedLocs.count(Ptr))
     return true;
   ConsumerInstance->VisitedLocs.insert(Ptr);
diff --git a/clang_delta/LocalToGlobal.cpp b/clang_delta/LocalToGlobal.cpp
index 8bc4512..e08e96e 100644
--- a/clang_delta/LocalToGlobal.cpp
+++ b/clang_delta/LocalToGlobal.cpp
@@ -217,7 +217,7 @@ bool LToGASTVisitor::makeLocalAsGlobalVar(FunctionDecl *FD, VarDecl *VD,
 
   for (DeclContext* DC = FD; DC; DC = DC->getParent()) {
     if (DC->getParent() && DC->getParent()->isTranslationUnit()) {
-      TheRewriter.InsertTextBefore(cast<Decl>(DC)->getLocStart(), GlobalVarStr);
+      TheRewriter.InsertTextBefore(cast<Decl>(DC)->getBeginLoc(), GlobalVarStr);
       return true;
     }
   }
diff --git a/clang_delta/ReduceArrayDim.cpp b/clang_delta/ReduceArrayDim.cpp
index a2f8e40..226fa41 100644
--- a/clang_delta/ReduceArrayDim.cpp
+++ b/clang_delta/ReduceArrayDim.cpp
@@ -249,9 +249,9 @@ unsigned ReduceArrayDim::getArraySize(const ArrayType *ATy)
   if (const DependentSizedArrayType *DepArrayTy =
       dyn_cast<DependentSizedArrayType>(ATy)) {
     const Expr *E = DepArrayTy->getSizeExpr();
-    llvm::APSInt Result;
-    if (E->EvaluateAsInt(Result, *Context)) {
-      return (unsigned)(*Result.getRawData());
+    clang::Expr::EvalResult Result;
+    if (E->EvaluateAsInt(Result, *Context) && Result.Val.isInt()) {
+      return Result.Val.getInt().getZExtValue();
     }
   }
 
diff --git a/clang_delta/ReducePointerLevel.cpp b/clang_delta/ReducePointerLevel.cpp
index 56fb628..6b4f3dc 100644
--- a/clang_delta/ReducePointerLevel.cpp
+++ b/clang_delta/ReducePointerLevel.cpp
@@ -947,7 +947,7 @@ void ReducePointerLevel::replaceArrowWithDot(const Expr *E)
 {
   std::string ES;
   RewriteHelper->getExprString(E, ES);
-  SourceLocation LocStart = E->getLocStart();
+  SourceLocation LocStart = E->getBeginLoc();
 
   size_t ArrowPos = ES.find("->");
   TransAssert((ArrowPos != std::string::npos) && "Cannot find Arrow!");
diff --git a/clang_delta/RemoveNamespace.cpp b/clang_delta/RemoveNamespace.cpp
index 4c97de1..a834fcf 100644
--- a/clang_delta/RemoveNamespace.cpp
+++ b/clang_delta/RemoveNamespace.cpp
@@ -352,7 +352,7 @@ bool RemoveNamespaceRewriteVisitor::VisitDeclRefExpr(DeclRefExpr *DRE)
       isa<EnumConstantDecl>(OrigDecl)) {
     std::string Name;
     if (ConsumerInstance->getNewName(OrigDecl, Name)) {
-      ConsumerInstance->TheRewriter.ReplaceText(DRE->getLocStart(),
+      ConsumerInstance->TheRewriter.ReplaceText(DRE->getBeginLoc(),
         OrigDecl->getNameAsString().size(), Name);
     }
   }
@@ -436,7 +436,7 @@ bool RemoveNamespaceRewriteVisitor::VisitClassTemplatePartialSpecializationDecl(
     if (!TyInfo)
       return true;
     TypeLoc TyLoc = TyInfo->getTypeLoc();
-    SourceLocation LocStart = TyLoc.getLocStart();
+    SourceLocation LocStart = TyLoc.getBeginLoc();
     TransAssert(LocStart.isValid() && "Invalid Location!");
     ConsumerInstance->TheRewriter.ReplaceText(
       LocStart, CXXRD->getNameAsString().size(), Name);
@@ -494,7 +494,7 @@ bool RemoveNamespaceRewriteVisitor::VisitInjectedClassNameTypeLoc(
 
   std::string Name;
   if (ConsumerInstance->getNewName(CXXRD, Name)) {
-    SourceLocation LocStart = TyLoc.getLocStart();
+    SourceLocation LocStart = TyLoc.getBeginLoc();
     TransAssert(LocStart.isValid() && "Invalid Location!");
 
     ConsumerInstance->TheRewriter.ReplaceText(
@@ -509,7 +509,7 @@ bool RemoveNamespaceRewriteVisitor::VisitTypedefTypeLoc(TypedefTypeLoc TyLoc)
 
   std::string Name;
   if (ConsumerInstance->getNewName(D, Name)) {
-    SourceLocation LocStart = TyLoc.getLocStart();
+    SourceLocation LocStart = TyLoc.getBeginLoc();
     ConsumerInstance->TheRewriter.ReplaceText(
       LocStart, D->getNameAsString().size(), Name);
   }
@@ -522,7 +522,7 @@ bool RemoveNamespaceRewriteVisitor::VisitEnumTypeLoc(EnumTypeLoc TyLoc)
 
   std::string Name;
   if (ConsumerInstance->getNewName(D, Name)) {
-    SourceLocation LocStart = TyLoc.getLocStart();
+    SourceLocation LocStart = TyLoc.getBeginLoc();
     ConsumerInstance->TheRewriter.ReplaceText(
       LocStart, D->getNameAsString().size(), Name);
   }
@@ -1006,7 +1006,7 @@ void RemoveNamespace::removeNamespace(const NamespaceDecl *ND)
     TheRewriter.RemoveText(StartLoc, 1);
 
   // Then remove name and the left brace
-  StartLoc = ND->getLocStart();
+  StartLoc = ND->getBeginLoc();
   TransAssert(StartLoc.isValid() && "Invalid Namespace LocStart!");
 
   const char *StartBuf = SrcManager->getCharacterData(StartLoc);
diff --git a/clang_delta/RemoveNestedFunction.cpp b/clang_delta/RemoveNestedFunction.cpp
index 01d3850..6fd29e0 100644
--- a/clang_delta/RemoveNestedFunction.cpp
+++ b/clang_delta/RemoveNestedFunction.cpp
@@ -233,7 +233,7 @@ void RemoveNestedFunction::addNewTmpVariable(ASTContext &ASTCtx)
     // Otherwise, we would end up with assertion failure, because we
     // modify the same location twice (through addnewAssignStmtBefore
     // and replaceExpr.
-    if (TheStmt->getLocStart() == TheCallExpr->getLocStart()) {
+    if (TheStmt->getBeginLoc() == TheCallExpr->getBeginLoc()) {
       std::string ExprStr;
       RewriteHelper->getExprString(TheCallExpr, ExprStr);
       VarStr += " = " + ExprStr + ";\n" + TmpVarName;
@@ -306,7 +306,7 @@ void RemoveNestedFunction::getNewTmpVariableStr(ASTContext &ASTCtx,
 
   if (const UnresolvedMemberExpr *UM = dyn_cast<UnresolvedMemberExpr>(E)) {
     DeclarationName DName = UM->getMemberName();
-    CXXRecordDecl *CXXRD = UM->getNamingClass();
+    const CXXRecordDecl *CXXRD = UM->getNamingClass();
     DeclContextSet VisitedCtxs;
     const FunctionDecl *FD = lookupFunctionDecl(DName, CXXRD, VisitedCtxs);
     // FIXME: try to resolve FD here
@@ -318,14 +318,14 @@ void RemoveNestedFunction::getNewTmpVariableStr(ASTContext &ASTCtx,
   if (const CXXTemporaryObjectExpr *CXXTE =
       dyn_cast<CXXTemporaryObjectExpr>(E)) {
     const CXXConstructorDecl *CXXCtor = CXXTE->getConstructor();
-    QT = CXXCtor->getThisType(ASTCtx);
+    QT = CXXCtor->getThisType();
     return getNewTmpVariable(QT, VarStr);
   }
 
   if (const CXXTemporaryObjectExpr *CXXTE =
       dyn_cast<CXXTemporaryObjectExpr>(E)) {
     const CXXConstructorDecl *CXXCtor = CXXTE->getConstructor();
-    QT = CXXCtor->getThisType(ASTCtx);
+    QT = CXXCtor->getThisType();
     return getNewTmpVariable(QT, VarStr);
   }
 
diff --git a/clang_delta/RemoveUnusedEnumMember.cpp b/clang_delta/RemoveUnusedEnumMember.cpp
index fbce87a..b4eba8f 100644
--- a/clang_delta/RemoveUnusedEnumMember.cpp
+++ b/clang_delta/RemoveUnusedEnumMember.cpp
@@ -97,12 +97,12 @@ void RemoveUnusedEnumMember::HandleTranslationUnit(ASTContext &Ctx)
 
 void RemoveUnusedEnumMember::removeEnumConstantDecl()
 {
-  SourceLocation StartLoc = (*TheEnumIterator)->getLocStart();
+  SourceLocation StartLoc = (*TheEnumIterator)->getBeginLoc();
   if (StartLoc.isMacroID()) {
     CharSourceRange Range = SrcManager->getExpansionRange(StartLoc);
     StartLoc = Range.getBegin();
   }
-  SourceLocation EndLoc = (*TheEnumIterator)->getLocEnd();
+  SourceLocation EndLoc = (*TheEnumIterator)->getEndLoc();
   if (EndLoc.isMacroID()) {
     CharSourceRange Range = SrcManager->getExpansionRange(EndLoc);
     EndLoc = Range.getEnd();
diff --git a/clang_delta/RemoveUnusedFunction.cpp b/clang_delta/RemoveUnusedFunction.cpp
index 747aac1..f8b19b9 100644
--- a/clang_delta/RemoveUnusedFunction.cpp
+++ b/clang_delta/RemoveUnusedFunction.cpp
@@ -387,19 +387,19 @@ bool RemoveUnusedFunction::hasValidOuterLocStart(
 SourceLocation RemoveUnusedFunction::getFunctionOuterLocStart(
                  const FunctionDecl *FD)
 {
-  SourceLocation LocStart = FD->getLocStart();
+  SourceLocation LocStart = FD->getBeginLoc();
   bool RecordLoc = false;
 
   // check if FD is from a function template
   if (FunctionTemplateDecl *FTD = FD->getDescribedFunctionTemplate()) {
-    // get FTD->getLocStart() only if it is less than FD->getLocStart,
+    // get FTD->getBeginLoc() only if it is less than FD->getBeginLoc,
     // for example, in the code below:
     //   template <typename T> struct S {template <typename T1> void foo();};
     //   template<typename T> template<typename T1> void S<T>::foo() { }
     // where
-    //   FTD->getLocStart() points to the begining of "template<typename T1>"
+    //   FTD->getBeginLoc() points to the begining of "template<typename T1>"
     if (hasValidOuterLocStart(FTD, FD)) {
-      LocStart = FTD->getLocStart();
+      LocStart = FTD->getBeginLoc();
       RecordLoc = true;
     }
   }
diff --git a/clang_delta/RemoveUnusedOuterClass.cpp b/clang_delta/RemoveUnusedOuterClass.cpp
index 2e5f731..e2393a9 100644
--- a/clang_delta/RemoveUnusedOuterClass.cpp
+++ b/clang_delta/RemoveUnusedOuterClass.cpp
@@ -122,7 +122,7 @@ void RemoveUnusedOuterClass::analyzeCXXRDSet()
 void RemoveUnusedOuterClass::removeOuterClass()
 {
   TransAssert(TheCXXRDDef && "NULL Base CXXRD!");
-  SourceLocation LocStart = TheCXXRDDef->getLocStart();
+  SourceLocation LocStart = TheCXXRDDef->getBeginLoc();
   SourceLocation LocEnd = 
     RewriteHelper->getEndLocationUntil(LocStart, '{');
   TransAssert(LocEnd.isValid() && "Invalid Location!");
diff --git a/clang_delta/RenameCXXMethod.cpp b/clang_delta/RenameCXXMethod.cpp
index 1f7132b..be98d37 100644
--- a/clang_delta/RenameCXXMethod.cpp
+++ b/clang_delta/RenameCXXMethod.cpp
@@ -252,7 +252,7 @@ bool RenameCXXMethodVisitor::VisitDeclRefExpr(DeclRefExpr *DRE)
       &QualLoc, MD, NewName);
   }
   else {
-    ConsumerInstance->TheRewriter.ReplaceText(DRE->getLocStart(),
+    ConsumerInstance->TheRewriter.ReplaceText(DRE->getBeginLoc(),
       MD->getNameAsString().size(), NewName);
   }
 
@@ -534,7 +534,8 @@ bool RenameCXXMethod::isSpecialCXXMethod(const CXXMethodDecl *MD)
       dyn_cast<CXXConversionDecl>(MD))
     return true;
 
-  if (MD->isUsualDeallocationFunction() ||
+  SmallVector<const FunctionDecl*, 1> DeallocPrevented;
+  if (MD->isUsualDeallocationFunction(DeallocPrevented) ||
       MD->isCopyAssignmentOperator() ||
       MD->isMoveAssignmentOperator() ||
       MD->isLambdaStaticInvoker() ||
diff --git a/clang_delta/RenameFun.cpp b/clang_delta/RenameFun.cpp
index ee7ba28..a7deaf3 100644
--- a/clang_delta/RenameFun.cpp
+++ b/clang_delta/RenameFun.cpp
@@ -145,7 +145,7 @@ bool RenameFunVisitor::VisitDeclRefExpr(DeclRefExpr *DRE)
 
   TransAssert((I != ConsumerInstance->FunToNameMap.end()) &&
               "Cannot find FunctionDecl!");
-  ConsumerInstance->TheRewriter.ReplaceText(DRE->getLocStart(), 
+  ConsumerInstance->TheRewriter.ReplaceText(DRE->getBeginLoc(), 
     FD->getNameAsString().size(), (*I).second);
   return true;
 }
diff --git a/clang_delta/ReplaceCallExpr.cpp b/clang_delta/ReplaceCallExpr.cpp
index 7d912cd..b6bebe9 100644
--- a/clang_delta/ReplaceCallExpr.cpp
+++ b/clang_delta/ReplaceCallExpr.cpp
@@ -538,7 +538,7 @@ void ReplaceCallExpr::sortParmRefsByOffs(const char *StartBuf,
       I = ParmRefToStrMap.begin(), E = ParmRefToStrMap.end(); I != E; ++I) {
 
     const DeclRefExpr *ParmRef = (*I).first;
-    SourceLocation ParmRefLocStart = ParmRef->getLocStart();
+    SourceLocation ParmRefLocStart = ParmRef->getBeginLoc();
     const char *ParmRefStartBuf =
       SrcManager->getCharacterData(ParmRefLocStart);
 
@@ -551,7 +551,7 @@ void ReplaceCallExpr::sortParmRefsByOffs(const char *StartBuf,
 void ReplaceCallExpr::replaceParmRefs(std::string &RetStr, const Expr *RetE,
        llvm::DenseMap<const DeclRefExpr *, std::string> &ParmRefToStrMap)
 {
-  SourceLocation StartLoc = RetE->getLocStart();
+  SourceLocation StartLoc = RetE->getBeginLoc();
   const char *StartBuf = SrcManager->getCharacterData(StartLoc);
 
   std::vector< std::pair<const DeclRefExpr *, int> > SortedParmRefs;
diff --git a/clang_delta/ReplaceDependentTypedef.cpp b/clang_delta/ReplaceDependentTypedef.cpp
index a0408a6..fe2541d 100644
--- a/clang_delta/ReplaceDependentTypedef.cpp
+++ b/clang_delta/ReplaceDependentTypedef.cpp
@@ -127,7 +127,7 @@ bool ReplaceDependentTypedef::isValidType(const QualType &QT)
 
 void ReplaceDependentTypedef::handleOneTypedefDecl(const TypedefDecl *D)
 {
-  if (isInIncludedFile(D) || D->getLocStart().isInvalid())
+  if (isInIncludedFile(D) || D->getBeginLoc().isInvalid())
     return;
 
   if (!isValidType(D->getUnderlyingType()))
diff --git a/clang_delta/ReplaceFunctionDefWithDecl.cpp b/clang_delta/ReplaceFunctionDefWithDecl.cpp
index c835c6f..c7a8460 100644
--- a/clang_delta/ReplaceFunctionDefWithDecl.cpp
+++ b/clang_delta/ReplaceFunctionDefWithDecl.cpp
@@ -323,7 +323,7 @@ bool ReplaceFunctionDefWithDecl::isMacroExpansion(const FunctionDecl *FD)
   const Stmt *Body = FD->getBody();
   if (!Body)
     return false;
-  return SrcManager->isMacroBodyExpansion(Body->getLocStart());
+  return SrcManager->isMacroBodyExpansion(Body->getBeginLoc());
 }
 
 void ReplaceFunctionDefWithDecl::addOneFunctionDef(const FunctionDecl *FD)
diff --git a/clang_delta/ReplaceOneLevelTypedefType.cpp b/clang_delta/ReplaceOneLevelTypedefType.cpp
index 75f0e92..bf55f12 100644
--- a/clang_delta/ReplaceOneLevelTypedefType.cpp
+++ b/clang_delta/ReplaceOneLevelTypedefType.cpp
@@ -123,7 +123,7 @@ void ReplaceOneLevelTypedefType::handleOneTypedefTypeLoc(TypedefTypeLoc TLoc)
     return;
   const TypedefType *TdefTy = TLoc.getTypePtr();
   const TypedefDecl *TdefD = dyn_cast<TypedefDecl>(TdefTy->getDecl());
-  if (!TdefD || TdefD->getLocStart().isInvalid())
+  if (!TdefD || TdefD->getBeginLoc().isInvalid())
     return;
   const TypedefDecl *CanonicalD = 
     dyn_cast<TypedefDecl>(TdefD->getCanonicalDecl());
diff --git a/clang_delta/ReplaceSimpleTypedef.cpp b/clang_delta/ReplaceSimpleTypedef.cpp
index 7c9db0c..602399e 100644
--- a/clang_delta/ReplaceSimpleTypedef.cpp
+++ b/clang_delta/ReplaceSimpleTypedef.cpp
@@ -85,7 +85,7 @@ bool ReplaceSimpleTypedefRewriteVisitor::VisitTypedefTypeLoc(TypedefTypeLoc Loc)
 
   const TypedefType *TdefTy = Loc.getTypePtr();
   const TypedefDecl *TdefD = dyn_cast<TypedefDecl>(TdefTy->getDecl());
-  if (!TdefD || TdefD->getLocStart().isInvalid())
+  if (!TdefD || TdefD->getBeginLoc().isInvalid())
     return true;
  
   if (dyn_cast<TypedefDecl>(TdefD->getCanonicalDecl()) == 
@@ -203,10 +203,10 @@ bool ReplaceSimpleTypedef::isValidType(const Type *Ty, const TypedefDecl *D)
 void ReplaceSimpleTypedef::handleOneTypedefDecl(const TypedefDecl *CanonicalD)
 {
   // omit some typedefs injected by Clang
-  if (CanonicalD->getLocStart().isInvalid())
+  if (CanonicalD->getBeginLoc().isInvalid())
     return;
 
-  FullSourceLoc FullLoc = Context->getFullLoc(CanonicalD->getLocStart());
+  FullSourceLoc FullLoc = Context->getFullLoc(CanonicalD->getBeginLoc());
   if (FullLoc.isInSystemHeader())
     return;
 
diff --git a/clang_delta/ReplaceUndefinedFunction.cpp b/clang_delta/ReplaceUndefinedFunction.cpp
index d6b6439..4c6bba9 100644
--- a/clang_delta/ReplaceUndefinedFunction.cpp
+++ b/clang_delta/ReplaceUndefinedFunction.cpp
@@ -90,7 +90,7 @@ bool ReplaceUndefFuncRewriteVisitor::VisitCallExpr(CallExpr *CE)
     return true;
 
   if (FD->getCanonicalDecl() == ConsumerInstance->ReplacedFunctionDecl) {
-    ConsumerInstance->TheRewriter.ReplaceText(CE->getLocStart(),
+    ConsumerInstance->TheRewriter.ReplaceText(CE->getBeginLoc(),
       ConsumerInstance->ReplacedFunctionDecl->getNameAsString().size(),
       ConsumerInstance->ReplacingFunctionDecl->getNameAsString());
   }
diff --git a/clang_delta/RewriteUtils.cpp b/clang_delta/RewriteUtils.cpp
index 1adde91..3a1fa19 100644
--- a/clang_delta/RewriteUtils.cpp
+++ b/clang_delta/RewriteUtils.cpp
@@ -455,7 +455,7 @@ SourceLocation RewriteUtils::getVarDeclTypeLocBegin(const VarDecl *VD)
     NextTL = NextTL.getNextTypeLoc();
   }
 
-  return VarTypeLoc.getLocStart();
+  return VarTypeLoc.getBeginLoc();
 }
 
 SourceLocation RewriteUtils::getVarDeclTypeLocEnd(const VarDecl *VD)
@@ -705,7 +705,7 @@ bool RewriteUtils::replaceExprNotInclude(const Expr *E,
 std::string RewriteUtils::getStmtIndentString(Stmt *S,
                                               SourceManager *SrcManager)
 {
-  SourceLocation StmtStartLoc = S->getLocStart();
+  SourceLocation StmtStartLoc = S->getBeginLoc();
 
   if (StmtStartLoc.isMacroID()) {
     StmtStartLoc = SrcManager->getFileLoc(StmtStartLoc);
@@ -748,7 +748,7 @@ bool RewriteUtils::addLocalVarToFunc(const std::string &VarStr,
     IndentStr = getStmtIndentString((*I), SrcManager);
 
   std::string NewVarStr = "\n" + IndentStr + VarStr;
-  SourceLocation StartLoc = Body->getLocStart();
+  SourceLocation StartLoc = Body->getBeginLoc();
   return !(TheRewriter->InsertTextAfterToken(StartLoc, NewVarStr));
 }
 
@@ -776,7 +776,7 @@ bool RewriteUtils::addNewAssignStmtBefore(Stmt *BeforeStmt,
       return false;
   }
 
-  SourceLocation StmtLocStart = BeforeStmt->getLocStart();
+  SourceLocation StmtLocStart = BeforeStmt->getBeginLoc();
   if (StmtLocStart.isMacroID()) {
     StmtLocStart = SrcManager->getFileLoc(StmtLocStart);
   }
@@ -842,7 +842,7 @@ bool RewriteUtils::addStringBeforeStmtInternal(Stmt *S,
   std::string IndentedStr;
   indentAfterNewLine(NewStr, IndentedStr, IndentStr);
 
-  return !(TheRewriter->InsertText(S->getLocStart(), 
+  return !(TheRewriter->InsertText(S->getBeginLoc(), 
            IndentedStr, /*InsertAfter=*/false));
 }
 
@@ -1164,7 +1164,7 @@ bool RewriteUtils::getDeclGroupStrAndRemove(DeclGroupRef DGR,
   SourceLocation LastEndLoc = getEndLocationUntil(LastVarRange, ';');
   getStringBetweenLocs(Str, TypeLocEnd, LastEndLoc);
 
-  SourceLocation StartLoc = FirstVD->getLocStart();
+  SourceLocation StartLoc = FirstVD->getBeginLoc();
   SourceLocation NewLastEndLoc = getLocationAfterSkiping(LastEndLoc, ';');
   return !(TheRewriter->RemoveText(SourceRange(StartLoc, NewLastEndLoc)));
 }
@@ -1421,7 +1421,7 @@ bool RewriteUtils::removeIfAndCond(const IfStmt *IS)
   const Stmt *ThenStmt = IS->getThen();
   TransAssert(ThenStmt && "NULL ThenStmt!");
 
-  SourceLocation ThenLoc = ThenStmt->getLocStart();
+  SourceLocation ThenLoc = ThenStmt->getBeginLoc();
   SourceLocation EndLoc =  ThenLoc.getLocWithOffset(-1);
 
   Rewriter::RewriteOptions Opts;
@@ -1546,7 +1546,7 @@ bool RewriteUtils::replaceCXXDtorCallExpr(const CXXMemberCallExpr *CE,
   if (Pos == 0)
     return true;
 
-  SourceLocation StartLoc = CE->getLocStart();
+  SourceLocation StartLoc = CE->getBeginLoc();
   StartLoc = StartLoc.getLocWithOffset(Pos);
 
   return !(TheRewriter->ReplaceText(StartLoc, OldDtorName.size(), Name));
@@ -1615,7 +1615,7 @@ bool RewriteUtils::replaceRecordType(RecordTypeLoc &RTLoc,
   if (!TypeId)
     return true;
 
-  SourceLocation LocStart = RTLoc.getLocStart();
+  SourceLocation LocStart = RTLoc.getBeginLoc();
 
   // Loc could be invalid, for example:
   // class AAA { };
diff --git a/clang_delta/SimpleInliner.cpp b/clang_delta/SimpleInliner.cpp
index 8728dcc..a93e982 100644
--- a/clang_delta/SimpleInliner.cpp
+++ b/clang_delta/SimpleInliner.cpp
@@ -487,7 +487,7 @@ void SimpleInliner::sortReturnStmtsByOffs(const char *StartBuf,
   for (ReturnStmtsVector::iterator I = ReturnStmts.begin(),
        E = ReturnStmts.end(); I != E; ++I) {
     ReturnStmt *RS = (*I);
-    SourceLocation RSLocStart = RS->getLocStart();
+    SourceLocation RSLocStart = RS->getBeginLoc();
     const char *RSStartBuf = SrcManager->getCharacterData(RSLocStart);
     int Off = RSStartBuf - StartBuf;
     TransAssert((Off >= 0) && "Bad Offset!");
@@ -504,7 +504,7 @@ void SimpleInliner::copyFunctionBody(void)
   RewriteHelper->getStmtString(Body, FuncBodyStr);
   TransAssert(FuncBodyStr[0] == '{');
 
-  SourceLocation StartLoc = Body->getLocStart();
+  SourceLocation StartLoc = Body->getBeginLoc();
   const char *StartBuf = SrcManager->getCharacterData(StartLoc);
 
   std::vector< std::pair<ReturnStmt *, int> > SortedReturnStmts;
diff --git a/clang_delta/SimplifyDependentTypedef.cpp b/clang_delta/SimplifyDependentTypedef.cpp
index 7d2a8c7..4a0dceb 100644
--- a/clang_delta/SimplifyDependentTypedef.cpp
+++ b/clang_delta/SimplifyDependentTypedef.cpp
@@ -140,7 +140,7 @@ void SimplifyDependentTypedef::HandleTranslationUnit(ASTContext &Ctx)
 
 void SimplifyDependentTypedef::rewriteTypedefDecl(void)
 {
-  SourceLocation LocStart = TheTypedefDecl->getLocStart();
+  SourceLocation LocStart = TheTypedefDecl->getBeginLoc();
 
   // skip "typedef "
   LocStart = LocStart.getLocWithOffset(8);
diff --git a/clang_delta/SimplifyIf.cpp b/clang_delta/SimplifyIf.cpp
index 9f9982c..770cc7a 100644
--- a/clang_delta/SimplifyIf.cpp
+++ b/clang_delta/SimplifyIf.cpp
@@ -95,7 +95,7 @@ bool SimplifyIfCollectionVisitor::VisitFunctionDecl(FunctionDecl *FD)
 //     foo(bar())
 bool SimplifyIfStatementVisitor::VisitIfStmt(IfStmt *IS)
 {
-  if (IS->getLocStart().isMacroID()) {
+  if (IS->getBeginLoc().isMacroID()) {
     return false;
   }
 
diff --git a/clang_delta/SimplifyNestedClass.cpp b/clang_delta/SimplifyNestedClass.cpp
index 1bd6702..624e0fb 100644
--- a/clang_delta/SimplifyNestedClass.cpp
+++ b/clang_delta/SimplifyNestedClass.cpp
@@ -134,8 +134,8 @@ void SimplifyNestedClass::HandleTranslationUnit(ASTContext &Ctx)
 void SimplifyNestedClass::removeOuterClass()
 {
   TransAssert(TheBaseCXXRD && "NULL Base CXXRD!");
-  SourceLocation LocStart = TheBaseCXXRD->getLocStart();
-  SourceLocation LocEnd = TheInnerDecl->getLocStart();
+  SourceLocation LocStart = TheBaseCXXRD->getBeginLoc();
+  SourceLocation LocEnd = TheInnerDecl->getBeginLoc();
   LocEnd = LocEnd.getLocWithOffset(-1);
   TheRewriter.RemoveText(SourceRange(LocStart, LocEnd));
 
diff --git a/clang_delta/SimplifyStruct.cpp b/clang_delta/SimplifyStruct.cpp
index 506ac35..74f24a5 100644
--- a/clang_delta/SimplifyStruct.cpp
+++ b/clang_delta/SimplifyStruct.cpp
@@ -130,7 +130,7 @@ bool SimplifyStructRewriteVisitor::VisitVarDecl(VarDecl *VD)
   if (RD != ConsumerInstance->TheRecordDecl)
     return true;
 
-  SourceLocation LocStart = VD->getLocStart();
+  SourceLocation LocStart = VD->getBeginLoc();
   void *LocPtr = LocStart.getPtrEncoding();
   if (ConsumerInstance->VisitedVarDeclLocs.count(LocPtr))
     return true;
@@ -187,7 +187,7 @@ bool SimplifyStructRewriteVisitor::VisitRecordTypeLoc(RecordTypeLoc RTLoc)
   if (CanonicalRD != ConsumerInstance->TheRecordDecl)
     return true;
 
-  SourceLocation LocStart = RTLoc.getLocStart();
+  SourceLocation LocStart = RTLoc.getBeginLoc();
   void *LocPtr = LocStart.getPtrEncoding();
   if (ConsumerInstance->VisitedLocs.count(LocPtr))
     return true;
@@ -224,7 +224,7 @@ bool SimplifyStructRewriteVisitor::VisitMemberExpr(MemberExpr *ME)
   TransAssert((ReplacingRD == ConsumerInstance->ReplacingRecordDecl) && 
     "Unmatched Replacing RD!");
 
-  SourceLocation LocEnd = ME->getLocEnd();
+  SourceLocation LocEnd = ME->getEndLoc();
   if (LocEnd.isMacroID()) {
     LocEnd = ConsumerInstance->SrcManager->getSpellingLoc(LocEnd);
   }
@@ -246,7 +246,7 @@ bool SimplifyStructRewriteVisitor::VisitMemberExpr(MemberExpr *ME)
 
   // no more MemberExpr upon this ME
   if (ArrowPos.isInvalid() && PeriodPos.isInvalid()) {
-    SourceLocation StartLoc = ME->getLocStart();
+    SourceLocation StartLoc = ME->getBeginLoc();
     size_t Pos;
 
     if (ME->isArrow()) {
diff --git a/clang_delta/TemplateNonTypeArgToInt.cpp b/clang_delta/TemplateNonTypeArgToInt.cpp
index e887196..ee20379 100644
--- a/clang_delta/TemplateNonTypeArgToInt.cpp
+++ b/clang_delta/TemplateNonTypeArgToInt.cpp
@@ -163,10 +163,10 @@ void TemplateNonTypeArgToInt::handleOneTemplateArgumentLoc(
   ValidInstanceNum++;
   if (ValidInstanceNum == TransformationCounter) {
     TheExpr = ArgLoc.getLocInfo().getAsExpr();
-    llvm::APSInt Result;
+    clang::Expr::EvalResult Result;
     if (!TheExpr->isValueDependent() &&
-        TheExpr->EvaluateAsInt(Result, *Context)) {
-      IntString = Result.toString(10);
+        TheExpr->EvaluateAsInt(Result, *Context) && Result.Val.isInt()) {
+      IntString = Result.Val.getInt().toString(10);
     }
   }
 }
diff --git a/clang_delta/Transformation.cpp b/clang_delta/Transformation.cpp
index 9fa9cb1..026cdd9 100644
--- a/clang_delta/Transformation.cpp
+++ b/clang_delta/Transformation.cpp
@@ -212,10 +212,10 @@ const Expr *Transformation::getArrayBaseExprAndIdxs(
   while (ASE) {
     const Expr *IdxE = ASE->getIdx();
     unsigned int Idx = 0;
-    llvm::APSInt Result;
-    if (IdxE && IdxE->EvaluateAsInt(Result, *Context)) {
+    clang::Expr::EvalResult Result;
+    if (IdxE && IdxE->EvaluateAsInt(Result, *Context) && Result.Val.isInt()) {
       // this will truncate a possible uint64 value to uint32 value
-      Idx = (unsigned int)(*Result.getRawData());
+      Idx = Result.Val.getInt().getZExtValue();
     }
     BaseE = ASE->getBase()->IgnoreParenCasts();
     ASE = dyn_cast<ArraySubscriptExpr>(BaseE);
@@ -389,11 +389,11 @@ const Expr *Transformation::getBaseExprAndIdxs(const Expr *E,
       const ArraySubscriptExpr *ASE = dyn_cast<ArraySubscriptExpr>(E);
       const Expr *IdxE = ASE->getIdx();
       unsigned int Idx = 0;
-      llvm::APSInt Result;
+      clang::Expr::EvalResult Result;
 
       // If we cannot have an integeral index, use 0.
-      if (IdxE && IdxE->EvaluateAsInt(Result, *Context)) {
-        std::string IntStr = Result.toString(10);
+      if (IdxE && IdxE->EvaluateAsInt(Result, *Context) && Result.Val.isInt()) {
+        std::string IntStr = Result.Val.getInt().toString(10);
         std::stringstream TmpSS(IntStr);
         if (!(TmpSS >> Idx))
           TransAssert(0 && "Non-integer value!");
@@ -434,12 +434,12 @@ const Type *Transformation::getBasePointerElemType(const Type *Ty)
 
 int Transformation::getIndexAsInteger(const Expr *E)
 {
-  llvm::APSInt Result;
+  clang::Expr::EvalResult Result;
   int Idx;
-  if (!E->EvaluateAsInt(Result, *Context))
+  if (!E->EvaluateAsInt(Result, *Context) || !Result.Val.isInt())
     TransAssert(0 && "Failed to Evaluate index!");
 
-  Idx = (int)(*Result.getRawData());
+  Idx = (int)Result.Val.getInt().getSExtValue();
   return Idx;
 }
 
@@ -1073,7 +1073,7 @@ bool Transformation::isInIncludedFile(const Decl *D) const
 
 bool Transformation::isInIncludedFile(const Stmt *S) const
 {
-  return isInIncludedFile(S->getLocStart());
+  return isInIncludedFile(S->getBeginLoc());
 }
 
 bool Transformation::isDeclaringRecordDecl(const RecordDecl *RD)
diff --git a/clang_delta/VectorToArray.cpp b/clang_delta/VectorToArray.cpp
index 3ca221b..8d6c0c1 100644
--- a/clang_delta/VectorToArray.cpp
+++ b/clang_delta/VectorToArray.cpp
@@ -129,7 +129,7 @@ public:
     unsigned NameLength = IdInfo->getLength();
     assert(NameLength && "Variable name has no length");
 
-    SourceLocation TypeLocStart = VD->getLocStart();
+    SourceLocation TypeLocStart = VD->getBeginLoc();
     const std::string ElemTypeName = getVectorElemTypeName(VD);
 
     SourceLocation NameLocM1 = NameLoc.getLocWithOffset(-1);
-- 
2.21.0

