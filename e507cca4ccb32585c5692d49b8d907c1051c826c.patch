From e507cca4ccb32585c5692d49b8d907c1051c826c Mon Sep 17 00:00:00 2001
From: Yang Chen <chenyang@cs.utah.edu>
Date: Sat, 27 Mar 2021 22:08:35 -0700
Subject: [PATCH] Handle function alias attribute for simple-inliner pass

---
 clang_delta/SimpleInliner.cpp                | 55 +++++++++++++++++++-
 clang_delta/SimpleInliner.h                  | 10 ++++
 clang_delta/tests/simple-inliner/inline10.c  | 19 +++++++
 clang_delta/tests/simple-inliner/inline11.cc | 17 ++++++
 clang_delta/tests/simple-inliner/inline9.c   | 17 ++++++
 5 files changed, 116 insertions(+), 2 deletions(-)
 create mode 100644 clang_delta/tests/simple-inliner/inline10.c
 create mode 100644 clang_delta/tests/simple-inliner/inline11.cc
 create mode 100644 clang_delta/tests/simple-inliner/inline9.c

diff --git a/clang_delta/SimpleInliner.cpp b/clang_delta/SimpleInliner.cpp
index 134d17b4..234556f4 100644
--- a/clang_delta/SimpleInliner.cpp
+++ b/clang_delta/SimpleInliner.cpp
@@ -18,6 +18,7 @@
 
 #include "clang/AST/RecursiveASTVisitor.h"
 #include "clang/AST/ASTContext.h"
+#include "clang/AST/Mangle.h"
 #include "clang/Basic/SourceManager.h"
 
 #include "TransformationManager.h"
@@ -220,6 +221,9 @@ bool SimpleInlinerFunctionStmtVisitor::VisitFunctionDecl(FunctionDecl *FD)
   ConsumerInstance->CollectionVisitor->setNumStmts(0);
   ConsumerInstance->CollectionVisitor->TraverseDecl(FD);
 
+  ConsumerInstance->
+    MangledNameToFuncDeclMap[ConsumerInstance->getMangledName(FD)] = FD;
+
   if (!FD->isVariadic()) {
     ConsumerInstance->FunctionDeclNumStmts[FD->getCanonicalDecl()] =
       ConsumerInstance->CollectionVisitor->getNumStmts();
@@ -247,6 +251,12 @@ void SimpleInliner::Initialize(ASTContext &context)
   FunctionVisitor = new SimpleInlinerFunctionVisitor(this);
   FunctionStmtVisitor = new SimpleInlinerFunctionStmtVisitor(this);
   StmtVisitor = new SimpleInlinerStmtVisitor(this);
+  if (context.getTargetInfo().getTriple().isOSWindows()) {
+    MangleCtx =
+      MicrosoftMangleContext::create(context, context.getDiagnostics());
+  } else {
+    MangleCtx = ItaniumMangleContext::create(context, context.getDiagnostics());
+  }
 }
 
 bool SimpleInliner::HandleTopLevelDecl(DeclGroupRef D)
@@ -276,7 +286,11 @@ void SimpleInliner::HandleTranslationUnit(ASTContext &Ctx)
   NameQueryWrap->TraverseDecl(Ctx.getTranslationUnitDecl());
   NamePostfix = NameQueryWrap->getMaxNamePostfix() + 1;
 
-  FunctionVisitor->TraverseDecl(CurrentFD);
+  if (FunctionDecl *AliaseeFD = getAliaseeFunctionDecl(CurrentFD)) {
+    FunctionVisitor->TraverseDecl(AliaseeFD);
+  } else {
+    FunctionVisitor->TraverseDecl(CurrentFD);
+  }
   StmtVisitor->TraverseDecl(TheCaller);
 
   TransAssert(TheStmt && "NULL TheStmt!");
@@ -287,6 +301,17 @@ void SimpleInliner::HandleTranslationUnit(ASTContext &Ctx)
     TransError = TransInternalError;
 }
 
+std::string SimpleInliner::getMangledName(FunctionDecl *FD) {
+  if (TransformationManager::isCLangOpt()) {
+    return FD->getNameAsString();
+  } else {
+    std::string S;
+    llvm::raw_string_ostream Stream(S);
+    MangleCtx->mangleName(FD, Stream);
+    return Stream.str();
+  }
+}
+
 bool SimpleInliner::isValidArgExpr(const Expr *E)
 {
   TransAssert(E && "NULL Expr!");
@@ -339,6 +364,12 @@ void SimpleInliner::getValidFunctionDecls(void)
   for (FunctionDeclToNumStmtsMap::iterator I = FunctionDeclNumStmts.begin(),
        E = FunctionDeclNumStmts.end(); I != E; ++I) {
     FunctionDecl *FD = (*I).first;
+    if (FD->hasDefiningAttr()) {
+      // skip bad alias
+      if (!getAliaseeFunctionDecl(FD)) {
+        continue;
+      }
+    }
     unsigned int NumStmts = (*I).second;
     unsigned int NumCalls = FunctionDeclNumCalls[FD];
 
@@ -497,9 +528,29 @@ void SimpleInliner::sortReturnStmtsByOffs(const char *StartBuf,
   }
 }
 
+FunctionDecl *SimpleInliner::getAliaseeFunctionDecl(FunctionDecl *FD) {
+  if (const Attr *A = FD->getDefiningAttr()) {
+    const AliasAttr *Alias = cast<AliasAttr>(A);
+    llvm::StringRef Aliasee = Alias->getAliasee();
+    auto I = MangledNameToFuncDeclMap.find(Aliasee);
+    if (I == MangledNameToFuncDeclMap.end())
+      return nullptr;
+    else
+      return I->second;
+  } else {
+    return FD;
+  }
+}
+
 void SimpleInliner::copyFunctionBody(void)
 {
-  Stmt *Body = CurrentFD->getBody();
+  Stmt *Body;
+  FunctionDecl *AliaseeFD = getAliaseeFunctionDecl(CurrentFD);
+  if (AliaseeFD) {
+    Body = AliaseeFD->getBody();
+  } else {
+    Body = CurrentFD->getBody();
+  }
   TransAssert(Body && "NULL Body!");
 
   std::string FuncBodyStr("");
diff --git a/clang_delta/SimpleInliner.h b/clang_delta/SimpleInliner.h
index 221dfcfc..f52d7d50 100644
--- a/clang_delta/SimpleInliner.h
+++ b/clang_delta/SimpleInliner.h
@@ -25,6 +25,7 @@ namespace clang {
   class FunctionDecl;
   class CallExpr;
   class DeclRefExpr;
+  class MangleContext;
   class ReturnStmt;
   class Expr;
   class Stmt;
@@ -50,6 +51,7 @@ friend class SimpleInlinerStmtVisitor;
       FunctionStmtVisitor(NULL),
       StmtVisitor(NULL),
       NameQueryWrap(NULL),
+      MangleCtx(NULL),
       TheCallExpr(NULL),
       TheCaller(NULL),
       CurrentFD(NULL),
@@ -85,6 +87,10 @@ friend class SimpleInlinerStmtVisitor;
 
   void doAnalysis(void);
 
+  std::string getMangledName(clang::FunctionDecl *FD);
+
+  clang::FunctionDecl *getAliaseeFunctionDecl(clang::FunctionDecl *FD);
+
   bool isValidArgExpr(const clang::Expr *E);
 
   bool hasValidArgExprs(const clang::CallExpr *CE);
@@ -124,6 +130,8 @@ friend class SimpleInlinerStmtVisitor;
 
   llvm::SmallVector<std::string, 4> ParmsWithNameClash;
 
+  std::map<std::string, clang::FunctionDecl *> MangledNameToFuncDeclMap;
+
   ReturnStmtsVector ReturnStmts;
 
   ParmRefsVector ParmRefs;
@@ -138,6 +146,8 @@ friend class SimpleInlinerStmtVisitor;
 
   TransNameQueryWrap *NameQueryWrap;
 
+  clang::MangleContext *MangleCtx;
+
   clang::CallExpr *TheCallExpr;
 
   clang::FunctionDecl *TheCaller;
diff --git a/clang_delta/tests/simple-inliner/inline10.c b/clang_delta/tests/simple-inliner/inline10.c
new file mode 100644
index 00000000..10773248
--- /dev/null
+++ b/clang_delta/tests/simple-inliner/inline10.c
@@ -0,0 +1,19 @@
+// RUN: %clang_delta --transformation=simple-inliner --counter=1 %s 2>&1 | %remove_lit_checks | FileCheck %s
+
+int c(int a) __attribute__((alias("foo")));
+void d() { c(1); }
+void f() { c(1); }
+int foo(int a) {
+  return a;
+}
+
+// CHECK: int c(int a) __attribute__((alias
+// CHECK: void d() {
+// CHECK: int [[VAR:.*]]; {int a = 1;
+// CHECK: [[VAR]] =  a;
+// CHECK: }
+// CHECK: [[VAR]]; }
+// CHECK: void f() { c(1); }
+// CHECK: int foo(int a) {
+// CHECK:   return a;
+// CHECK: }
diff --git a/clang_delta/tests/simple-inliner/inline11.cc b/clang_delta/tests/simple-inliner/inline11.cc
new file mode 100644
index 00000000..499fb4e3
--- /dev/null
+++ b/clang_delta/tests/simple-inliner/inline11.cc
@@ -0,0 +1,17 @@
+// RUN: %clang_delta --transformation=simple-inliner --counter=1 %s 2>&1 | %remove_lit_checks | FileCheck %s
+
+// CHECK-NOT: int c(int a) __attribute__((alias
+int c(int a) __attribute__((alias("_Z3fooi")));
+void d() { c(1); }
+int foo(int a) {
+  return a;
+}
+
+// CHECK: void d() {
+// CHECK: int [[VAR:.*]]; {int a = 1;
+// CHECK: [[VAR]] =  a;
+// CHECK: }
+// CHECK: [[VAR]]; }
+// CHECK: int foo(int a) {
+// CHECK:   return a;
+// CHECK: }
diff --git a/clang_delta/tests/simple-inliner/inline9.c b/clang_delta/tests/simple-inliner/inline9.c
new file mode 100644
index 00000000..b8ef1f8c
--- /dev/null
+++ b/clang_delta/tests/simple-inliner/inline9.c
@@ -0,0 +1,17 @@
+// RUN: %clang_delta --transformation=simple-inliner --counter=1 %s 2>&1 | %remove_lit_checks | FileCheck %s
+
+// CHECK-NOT: int c(int a) __attribute__((alias
+int c(int a) __attribute__((alias("foo")));
+void d() { c(1); }
+int foo(int a) {
+  return a;
+}
+
+// CHECK: void d() {
+// CHECK: int [[VAR:.*]]; {int a = 1;
+// CHECK: [[VAR]] =  a;
+// CHECK: }
+// CHECK: [[VAR]]; }
+// CHECK: int foo(int a) {
+// CHECK:   return a;
+// CHECK: }
