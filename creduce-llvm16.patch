diff -up creduce-master/clang_delta/CommonRenameClassRewriteVisitor.h.omv~ creduce-master/clang_delta/CommonRenameClassRewriteVisitor.h
--- creduce-master/clang_delta/CommonRenameClassRewriteVisitor.h.omv~	2023-04-15 00:31:59.508063757 +0200
+++ creduce-master/clang_delta/CommonRenameClassRewriteVisitor.h	2023-04-15 00:32:25.669291652 +0200
@@ -420,8 +420,7 @@ bool CommonRenameClassRewriteVisitor<T>:
     return getDerived().TraverseStmt(ArgLoc.getSourceExpression());
 
   case TemplateArgument::Pack:
-    return getDerived().TraverseTemplateArguments(Arg.pack_begin(),
-                                                  Arg.pack_size());
+    return getDerived().TraverseTemplateArguments(Arg);
   }
 
   return true;
diff -up creduce-master/clang_delta/ExpressionDetector.cpp.omv~ creduce-master/clang_delta/ExpressionDetector.cpp
--- creduce-master/clang_delta/ExpressionDetector.cpp.omv~	2023-04-15 00:28:48.051395706 +0200
+++ creduce-master/clang_delta/ExpressionDetector.cpp	2023-04-15 00:29:45.498896263 +0200
@@ -62,7 +62,7 @@ public:
   virtual void InclusionDirective(SourceLocation HashLoc,
                           const Token &IncludeTok,
                           StringRef FileName, bool IsAngled,
-                          CharSourceRange FilenameRange, Optional<FileEntryRef> File,
+                          CharSourceRange FilenameRange, OptionalFileEntryRef File,
                           StringRef SearchPath, StringRef RelativePath,
                           const Module *Imported,
                           SrcMgr::CharacteristicKind FileType) override;
@@ -82,7 +82,7 @@ void IncludesPPCallbacks::InclusionDirec
                                              StringRef FileName,
                                             bool /*IsAngled*/,
                                              CharSourceRange /*FilenameRange*/,
-                                             Optional<FileEntryRef> /*File*/,
+                                             OptionalFileEntryRef /*File*/,
                                              StringRef /*SearchPath*/,
                                              StringRef /*RelativePath*/,
                                              const Module * /*Imported*/,
diff -up creduce-master/clang_delta/RemoveNestedFunction.cpp.omv~ creduce-master/clang_delta/RemoveNestedFunction.cpp
--- creduce-master/clang_delta/RemoveNestedFunction.cpp.omv~	2023-04-15 00:33:13.943712163 +0200
+++ creduce-master/clang_delta/RemoveNestedFunction.cpp	2023-04-15 00:36:21.410344948 +0200
@@ -183,18 +183,18 @@ void RemoveNestedFunction::getVarStrForT
        std::string &VarStr,
        const TemplateSpecializationType *TST)
 {
-  unsigned NumArgs = TST->getNumArgs();
+  unsigned NumArgs = TST->template_arguments().size();
   if (NumArgs == 0) {
     return;
   }
 
   std::string ArgStr;
   llvm::raw_string_ostream Stream(ArgStr);
-  TST->getArg(0).print(Context->getPrintingPolicy(), Stream,
+  TST->template_arguments()[0].print(Context->getPrintingPolicy(), Stream,
                        /*IncludeType*/ true);
 
   for (unsigned I = 1; I < NumArgs; ++I) {
-    const TemplateArgument &Arg = TST->getArg(I);
+    const TemplateArgument &Arg = TST->template_arguments()[I];
     Stream << ", ";
     Arg.print(Context->getPrintingPolicy(), Stream, /*IncludeType*/ true);
   }
diff -up creduce-master/clang_delta/TemplateArgToInt.cpp.omv~ creduce-master/clang_delta/TemplateArgToInt.cpp
--- creduce-master/clang_delta/TemplateArgToInt.cpp.omv~	2023-04-15 00:46:50.150380356 +0200
+++ creduce-master/clang_delta/TemplateArgToInt.cpp	2023-04-15 00:55:08.835998137 +0200
@@ -357,8 +357,7 @@ void TemplateArgToInt::handleOneType(con
   if (!SubstType)
     return;
 
-  const TemplateTypeParmType *ParmType = SubstType->getReplacedParameter();
-  TemplateTypeParmDecl *ParmDecl = ParmType->getDecl();
+  const TemplateTypeParmDecl *ParmDecl = SubstType->getReplacedParameter();
   TransAssert(ParmDecl && "Invalid ParmDecl!");
   const TemplateDecl *TmplD = ParamToTemplateDecl[ParmDecl];
   if (TmplD == NULL) {
@@ -384,7 +383,7 @@ void TemplateArgToInt::handleOneType(con
   TemplateParameterIdxSet *InvalidIdx = 
     DeclToParamIdx[dyn_cast<TemplateDecl>(TmplD->getCanonicalDecl())];
   TransAssert(InvalidIdx && "NULL InvalidIdx!");
-  InvalidIdx->insert(ParmType->getIndex());
+  InvalidIdx->insert(ParmDecl->getIndex());
 }
 
 TemplateArgToInt::~TemplateArgToInt()
diff -up creduce-master/clang_delta/Transformation.cpp.omv~ creduce-master/clang_delta/Transformation.cpp
--- creduce-master/clang_delta/Transformation.cpp.omv~	2023-04-15 00:57:47.085225679 +0200
+++ creduce-master/clang_delta/Transformation.cpp	2023-04-15 01:19:45.211109684 +0200
@@ -807,7 +807,7 @@ const CXXRecordDecl *Transformation::get
 
   case Type::TypeOf: {
     return getBaseDeclFromType(
-      dyn_cast<TypeOfType>(Ty)->getUnderlyingType().getTypePtr());
+      dyn_cast<TypeOfType>(Ty)->getUnmodifiedType().getTypePtr());
   }
 
   default:
@@ -876,8 +876,7 @@ bool Transformation::isBeforeColonColon(
 }
 
 bool Transformation::replaceDependentNameString(const Type *Ty,
-                                                const TemplateArgument *Args,
-                                                unsigned NumArgs,
+                                                ArrayRef<TemplateArgument> Args,
                                                 std::string &Str,
                                                 bool &Typename)
 {
@@ -901,7 +900,7 @@ bool Transformation::replaceDependentNam
     return false;
 
   unsigned Idx = ParmTy->getIndex();
-  TransAssert((Idx < NumArgs) && "Bad Parm Index!");
+  TransAssert((Idx < Args.size()) && "Bad Parm Index!");
   const TemplateArgument Arg = Args[Idx];
   if (Arg.getKind() != TemplateArgument::Type)
     return false;
@@ -915,13 +914,12 @@ bool Transformation::replaceDependentNam
 
 bool Transformation::getTemplateTypeParmString(
        const TemplateTypeParmType *ParmTy,
-       const TemplateArgument *Args,
-       unsigned NumArgs,
+       ArrayRef<TemplateArgument> Args,
        std::string &Str)
 {
   unsigned Idx = ParmTy->getIndex();
   // we could have default template args, skip this case for now
-  if (Idx >= NumArgs)
+  if (Idx >= Args.size())
     return false;
   const TemplateArgument Arg = Args[Idx];
   if (Arg.getKind() != TemplateArgument::Type)
@@ -933,8 +931,7 @@ bool Transformation::getTemplateTypeParm
 
 bool Transformation::getTypedefString(const StringRef &Name,
                                       const CXXRecordDecl *CXXRD,
-                                      const TemplateArgument *Args,
-                                      unsigned NumArgs,
+                                      ArrayRef<TemplateArgument> Args,
                                       std::string &Str,
                                       bool &Typename)
 {
@@ -948,12 +945,12 @@ bool Transformation::getTypedefString(co
     Type::TypeClass TC = UnderlyingTy->getTypeClass();
     if (TC == Type::DependentName) {
       if (replaceDependentNameString(UnderlyingTy, Args,
-                                     NumArgs, Str, Typename))
+                                     Str, Typename))
         return true;
     }
     else if (const TemplateTypeParmType *ParmTy =
              UnderlyingTy->getAs<TemplateTypeParmType>()) {
-      if (getTemplateTypeParmString(ParmTy, Args, NumArgs, Str))
+      if (getTemplateTypeParmString(ParmTy, Args, Str))
         return true;
     }
   }
@@ -970,7 +967,7 @@ bool Transformation::getTypedefString(co
     const CXXRecordDecl *BaseDef = Base->getDefinition();
     if (!BaseDef)
       continue;
-    if (getTypedefString(Name, BaseDef, Args, NumArgs, Str, Typename))
+    if (getTypedefString(Name, BaseDef, Args, Str, Typename))
       return true;
   }
 
@@ -998,15 +995,13 @@ bool Transformation::getDependentNameTyp
   if (!BaseDef)
     return false;
 
-  unsigned NumArgs = 0;
-  const TemplateArgument *Args = NULL;
+  ArrayRef<TemplateArgument> Args;
   if (const TemplateSpecializationType *TST =
       Ty->getAs<TemplateSpecializationType>()) {
-    NumArgs = TST->getNumArgs();
-    Args = TST->getArgs();
+    Args = TST->template_arguments();
   }
   return getTypedefString(IdInfo->getName(),
-           BaseDef, Args, NumArgs, Str, Typename);
+           BaseDef, Args, Str, Typename);
 }
 
 bool Transformation::getTypeString(const QualType &QT,
diff -up creduce-master/clang_delta/Transformation.h.omv~ creduce-master/clang_delta/Transformation.h
--- creduce-master/clang_delta/Transformation.h.omv~	2023-04-15 01:20:08.296333447 +0200
+++ creduce-master/clang_delta/Transformation.h	2023-04-15 01:21:09.471920534 +0200
@@ -271,8 +271,7 @@ protected:
 
   bool getTypedefString(const llvm::StringRef &Name,
                         const clang::CXXRecordDecl *CXXRD,
-                        const clang::TemplateArgument *Args,
-                        unsigned NumArgs,
+                        const llvm::ArrayRef<clang::TemplateArgument> Args,
                         std::string &Str,
                         bool &Typename);
 
@@ -281,14 +280,12 @@ protected:
                                   bool &Typename);
 
   bool replaceDependentNameString(const clang::Type *Ty,
-                                  const clang::TemplateArgument *Args,
-                                  unsigned NumArgs,
+                                  const llvm::ArrayRef<clang::TemplateArgument> Args,
                                   std::string &Str,
                                   bool &Typename);
 
   bool getTemplateTypeParmString(const clang::TemplateTypeParmType *ParmTy,
-                                const clang::TemplateArgument *Args,
-                                unsigned NumArgs,
+                                const llvm::ArrayRef<clang::TemplateArgument> Args,
                                 std::string &Str);
 
   unsigned getNumExplicitDecls(const clang::CXXRecordDecl *CXXRD);
