From 05aa5659c055860e84ec9f53b19e1228b34510a1 Mon Sep 17 00:00:00 2001
From: Yang Chen <chenyang@cs.utah.edu>
Date: Tue, 13 Oct 2020 00:49:53 -0700
Subject: [PATCH] built with LLVM 12.0.1 release
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This commit is a combination of the following three commits from
llvm-12.0-dev branch plus minor fix in SimpleInliner.cpp:

* commit: 3e1f5a1ec:

Make it compile with LLVM11

Applied the patch provided by Vegard Nossum (vegard@github).

* commit d45d5455:

built with llvm-projet dev branch

Known to work with llvm-project commit 905f874c449cc114d74eaeb19639664779fd0b6e

* commit 5e00bcfd:

Fix build with LLVM/clang 12.0.0 final

Signed-off-by: Bernhard Rosenkr√§nzer <bero@lindev.ch>
---
 clang_delta/CommonRenameClassRewriteVisitor.h |  4 ++--
 clang_delta/RemoveNamespace.cpp               |  2 +-
 clang_delta/RewriteUtils.cpp                  |  6 +++---
 clang_delta/SimpleInliner.cpp                 |  3 ++-
 clang_delta/Transformation.cpp                |  4 ++--
 clang_delta/TransformationManager.cpp         | 19 +++++++++++--------
 6 files changed, 21 insertions(+), 17 deletions(-)

diff --git a/clang_delta/CommonRenameClassRewriteVisitor.h b/clang_delta/CommonRenameClassRewriteVisitor.h
index e400f3ff..ba860d9d 100644
--- a/clang_delta/CommonRenameClassRewriteVisitor.h
+++ b/clang_delta/CommonRenameClassRewriteVisitor.h
@@ -98,7 +98,7 @@ bool CommonRenameClassRewriteVisitor<T>::VisitUsingDecl(UsingDecl *D)
     return true;
 
   IdentifierInfo *IdInfo = DeclName.getAsIdentifierInfo();
-  std::string IdName = IdInfo->getName();
+  std::string IdName = IdInfo->getName().str();
   std::string Name;
   if (getNewNameByName(IdName, Name)) {
     SourceLocation LocStart = NameInfo.getBeginLoc();
@@ -337,7 +337,7 @@ template<typename T> bool CommonRenameClassRewriteVisitor<T>::
   TransAssert(DTST && "Bad DependentTemplateSpecializationType!");
 
   const IdentifierInfo *IdInfo = DTST->getIdentifier();
-  std::string IdName = IdInfo->getName();
+  std::string IdName = IdInfo->getName().str();
   std::string Name;
   if (getNewNameByName(IdName, Name)) {
     SourceLocation LocStart = DTSLoc.getTemplateNameLoc();
diff --git a/clang_delta/RemoveNamespace.cpp b/clang_delta/RemoveNamespace.cpp
index 84d7aed3..52ed6d89 100644
--- a/clang_delta/RemoveNamespace.cpp
+++ b/clang_delta/RemoveNamespace.cpp
@@ -465,7 +465,7 @@ bool RemoveNamespaceRewriteVisitor::VisitDependentTemplateSpecializationTypeLoc(
   TransAssert(DTST && "Bad DependentTemplateSpecializationType!");
 
   const IdentifierInfo *IdInfo = DTST->getIdentifier();
-  std::string IdName = IdInfo->getName();
+  std::string IdName = IdInfo->getName().str();
   std::string Name;
 
   // FIXME:
diff --git a/clang_delta/RewriteUtils.cpp b/clang_delta/RewriteUtils.cpp
index 1ff74f56..de3ec67c 100644
--- a/clang_delta/RewriteUtils.cpp
+++ b/clang_delta/RewriteUtils.cpp
@@ -736,8 +736,8 @@ std::string RewriteUtils::getStmtIndentString(Stmt *S,
   StringRef MB = SrcManager->getBufferData(FID);
  
   unsigned lineNo = SrcManager->getLineNumber(FID, StartOffset) - 1;
-  const SrcMgr::ContentCache *
-      Content = SrcManager->getSLocEntry(FID).getFile().getContentCache();
+  const SrcMgr::ContentCache *Content =
+    &SrcManager->getSLocEntry(FID).getFile().getContentCache();
   unsigned lineOffs = Content->SourceLineCache[lineNo];
  
   // Find the whitespace at the start of the line.
@@ -748,7 +748,7 @@ std::string RewriteUtils::getStmtIndentString(Stmt *S,
     ++I;
   indentSpace = MB.substr(lineOffs, I-lineOffs);
 
-  return indentSpace;
+  return indentSpace.str();
 }
 
 bool RewriteUtils::addLocalVarToFunc(const std::string &VarStr,
diff --git a/clang_delta/SimpleInliner.cpp b/clang_delta/SimpleInliner.cpp
index e357ffc4..dc1c1521 100644
--- a/clang_delta/SimpleInliner.cpp
+++ b/clang_delta/SimpleInliner.cpp
@@ -20,6 +20,7 @@
 #include "clang/AST/ASTContext.h"
 #include "clang/AST/Mangle.h"
 #include "clang/Basic/SourceManager.h"
+#include "clang/Basic/TargetInfo.h"
 
 #include "TransformationManager.h"
 #include "CommonStatementVisitor.h"
@@ -535,7 +536,7 @@ FunctionDecl *SimpleInliner::getAliaseeFunctionDecl(FunctionDecl *FD) {
   if (const Attr *A = FD->getDefiningAttr()) {
     const AliasAttr *Alias = cast<AliasAttr>(A);
     llvm::StringRef Aliasee = Alias->getAliasee();
-    auto I = MangledNameToFuncDeclMap.find(Aliasee);
+    auto I = MangledNameToFuncDeclMap.find(Aliasee.str());
     if (I == MangledNameToFuncDeclMap.end())
       return nullptr;
     else
diff --git a/clang_delta/Transformation.cpp b/clang_delta/Transformation.cpp
index a1fba231..782b9127 100644
--- a/clang_delta/Transformation.cpp
+++ b/clang_delta/Transformation.cpp
@@ -106,7 +106,7 @@ void Transformation::outputTransformedSource(llvm::raw_ostream &OutStream)
 void Transformation::outputOriginalSource(llvm::raw_ostream &OutStream)
 {
   FileID MainFileID = SrcManager->getMainFileID();
-  const llvm::MemoryBuffer *MainBuf = SrcManager->getBuffer(MainFileID);
+  auto MainBuf = SrcManager->getBufferOrNone(MainFileID);
   TransAssert(MainBuf && "Empty MainBuf!");
   OutStream << MainBuf->getBufferStart();
   OutStream.flush();
@@ -359,7 +359,7 @@ unsigned int Transformation::getConstArraySize(
   llvm::SmallString<8> IntStr;
   Result.toStringUnsigned(IntStr);
 
-  std::stringstream TmpSS(IntStr.str());
+  std::stringstream TmpSS(IntStr.str().str());
 
   if (!(TmpSS >> Sz)) {
     return UINT_MAX;
diff --git a/clang_delta/TransformationManager.cpp b/clang_delta/TransformationManager.cpp
index b123632e..632a79c5 100644
--- a/clang_delta/TransformationManager.cpp
+++ b/clang_delta/TransformationManager.cpp
@@ -16,9 +16,12 @@
 
 #include <sstream>
 
+#include "clang/Basic/Builtins.h"
 #include "clang/Basic/Diagnostic.h"
+#include "clang/Basic/FileManager.h"
 #include "clang/Basic/TargetInfo.h"
 #include "clang/Lex/Preprocessor.h"
+#include "clang/Lex/PreprocessorOptions.h"
 #include "clang/Frontend/CompilerInstance.h"
 #include "clang/Parse/ParseAST.h"
 
@@ -101,16 +104,16 @@ bool TransformationManager::initializeCompilerInstance(std::string &ErrorMsg)
   CompilerInvocation &Invocation = ClangInstance->getInvocation();
   InputKind IK = FrontendOptions::getInputKindForExtension(
         StringRef(SrcFileName).rsplit('.').second);
-  if (IK.getLanguage() == InputKind::C) {
-    Invocation.setLangDefaults(ClangInstance->getLangOpts(), InputKind::C, T, PPOpts);
+  if (IK.getLanguage() == Language::C) {
+    Invocation.setLangDefaults(ClangInstance->getLangOpts(), Language::C, T, PPOpts.Includes);
   }
-  else if (IK.getLanguage() == InputKind::CXX) {
+  else if (IK.getLanguage() == Language::CXX) {
     // ISSUE: it might cause some problems when building AST
     // for a function which has a non-declared callee, e.g.,
     // It results an empty AST for the caller.
-    Invocation.setLangDefaults(ClangInstance->getLangOpts(), InputKind::CXX, T, PPOpts);
+    Invocation.setLangDefaults(ClangInstance->getLangOpts(), Language::CXX, T, PPOpts.Includes);
   }
-  else if(IK.getLanguage() == InputKind::OpenCL) {
+  else if(IK.getLanguage() == Language::OpenCL) {
     //Commandline parameters
     std::vector<const char*> Args;
     Args.push_back("-x");
@@ -122,7 +125,7 @@ bool TransformationManager::initializeCompilerInstance(std::string &ErrorMsg)
     ClangInstance->createFileManager();
 
     if(CLCPath != NULL && ClangInstance->hasFileManager() &&
-       ClangInstance->getFileManager().getDirectory(CLCPath, false) != NULL) {
+       ClangInstance->getFileManager().getDirectory(CLCPath, false)) {
         Args.push_back("-I");
         Args.push_back(CLCPath);
     }
@@ -132,10 +135,10 @@ bool TransformationManager::initializeCompilerInstance(std::string &ErrorMsg)
     Args.push_back("-fno-builtin");
 
     CompilerInvocation::CreateFromArgs(Invocation,
-                                       &Args[0], &Args[0] + Args.size(),
+		                       ArrayRef<const char*>(&Args[0], &Args[0] + Args.size()),
                                        ClangInstance->getDiagnostics());
     Invocation.setLangDefaults(ClangInstance->getLangOpts(),
-                               InputKind::OpenCL, T, PPOpts);
+                               Language::OpenCL, T, PPOpts.Includes);
   }
   else {
     ErrorMsg = "Unsupported file type!";
