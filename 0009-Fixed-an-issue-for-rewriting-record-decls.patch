From d5bb977c4669eca50ac1c897e75f8f8b3a01ee07 Mon Sep 17 00:00:00 2001
From: Yang Chen <chenyang@cs.utah.edu>
Date: Mon, 27 Aug 2018 22:38:15 -0700
Subject: [PATCH 09/31] Fixed an issue for rewriting record decls

When we have a record decl through its definition, we can only
rewrite its definition once.
---
 clang_delta/CommonRenameClassRewriteVisitor.h | 48 ++++++++++++++-----
 clang_delta/RemoveBaseClass.cpp               | 15 +++---
 clang_delta/RenameClass.cpp                   |  9 ++--
 clang_delta/ReplaceDerivedClass.cpp           | 11 +++--
 clang_delta/RewriteUtils.cpp                  | 15 ++++++
 clang_delta/RewriteUtils.h                    |  3 ++
 clang_delta/Transformation.cpp                | 11 +++++
 clang_delta/Transformation.h                  | 11 +++++
 .../replace-derived1.cpp                      | 15 ++++++
 .../replace-derived2.cpp                      | 16 +++++++
 .../replace-derived3.cpp                      | 16 +++++++
 11 files changed, 142 insertions(+), 28 deletions(-)
 create mode 100644 clang_delta/tests/replace-derived-class/replace-derived1.cpp
 create mode 100644 clang_delta/tests/replace-derived-class/replace-derived2.cpp
 create mode 100644 clang_delta/tests/replace-derived-class/replace-derived3.cpp

diff --git a/clang_delta/CommonRenameClassRewriteVisitor.h b/clang_delta/CommonRenameClassRewriteVisitor.h
index 61bdd80..ff755a8 100644
--- a/clang_delta/CommonRenameClassRewriteVisitor.h
+++ b/clang_delta/CommonRenameClassRewriteVisitor.h
@@ -14,6 +14,8 @@
 #include "llvm/ADT/SmallPtrSet.h"
 #include "clang/AST/RecursiveASTVisitor.h"
 
+class Transformation;
+
 namespace clang_delta_common_visitor {
 
 using namespace clang;
@@ -21,11 +23,13 @@ using namespace clang;
 template<typename T>
 class CommonRenameClassRewriteVisitor : public RecursiveASTVisitor<T> {
 public:
-  CommonRenameClassRewriteVisitor(Rewriter *RT, 
+  CommonRenameClassRewriteVisitor(Transformation *Instance,
+                                  Rewriter *RT,
                                   RewriteUtils *Helper,
                                   const CXXRecordDecl *CXXRD,
                                   const std::string &Name)
-    : TheRewriter(RT),
+    : ConsumerInstance(Instance),
+      TheRewriter(RT),
       RewriteHelper(Helper),
       TheCXXRecordDecl(CXXRD),
       NewNameStr(Name)
@@ -74,6 +78,8 @@ private:
 
   LocPtrSet VisitedLocs;
 
+  Transformation *ConsumerInstance;
+
   Rewriter *TheRewriter;
 
   RewriteUtils *RewriteHelper;
@@ -177,7 +183,18 @@ bool CommonRenameClassRewriteVisitor<T>::VisitCXXRecordDecl(
        CXXRecordDecl *CXXRD)
 {
   std::string Name;
-  if (getNewName(CXXRD, Name)) {
+  if (!getNewName(CXXRD, Name))
+    return true;
+
+  void *LocPtr = CXXRD->getLocation().getPtrEncoding();
+  if (VisitedLocs.count(LocPtr))
+    return true;
+  VisitedLocs.insert(LocPtr);
+
+  if (ConsumerInstance->isDeclaringRecordDecl(CXXRD)) {
+    RewriteHelper->replaceRecordDeclDef(CXXRD, Name);
+  }
+  else {
     RewriteHelper->replaceRecordDeclName(CXXRD, Name);
   }
 
@@ -279,16 +296,21 @@ bool CommonRenameClassRewriteVisitor<T>::VisitRecordTypeLoc(RecordTypeLoc RTLoc)
     return true;
 
   std::string Name;
-  if (getNewName(RD, Name)) {
-    // Avoid duplicated rewrites to Decls from the same DeclGroup, e.g.,
-    // struct S s1, s2
-    SourceLocation LocStart = RTLoc.getLocStart();
-    void *LocPtr = LocStart.getPtrEncoding();
-    if (VisitedLocs.count(LocPtr))
-      return true;
-    VisitedLocs.insert(LocPtr);
-    RewriteHelper->replaceRecordType(RTLoc, Name);
-  }
+  if (!getNewName(RD, Name))
+    return true;
+
+  // Let VisitCXXRecordDecl handle this case.
+  if (ConsumerInstance->isDeclaringRecordDecl(RD))
+    return true;
+
+  // Avoid duplicated rewrites to Decls from the same DeclGroup, e.g.,
+  // struct S s1, s2
+  SourceLocation LocStart = RTLoc.getLocStart();
+  void *LocPtr = LocStart.getPtrEncoding();
+  if (VisitedLocs.count(LocPtr))
+    return true;
+  VisitedLocs.insert(LocPtr);
+  RewriteHelper->replaceRecordType(RTLoc, Name);
   return true;
 }
 
diff --git a/clang_delta/RemoveBaseClass.cpp b/clang_delta/RemoveBaseClass.cpp
index 2c04943..1cf0c8d 100644
--- a/clang_delta/RemoveBaseClass.cpp
+++ b/clang_delta/RemoveBaseClass.cpp
@@ -60,16 +60,17 @@ bool RemoveBaseClassBaseVisitor::VisitCXXRecordDecl(
   return true;
 }
 
-class RemoveBaseClassRewriteVisitor : public 
+class RemoveBaseClassRewriteVisitor : public
   CommonRenameClassRewriteVisitor<RemoveBaseClassRewriteVisitor> 
 {
 public:
-  RemoveBaseClassRewriteVisitor(Rewriter *RT, 
-                            RewriteUtils *Helper,
-                            const CXXRecordDecl *CXXRD,
-                            const std::string &Name)
+  RemoveBaseClassRewriteVisitor(Transformation *Instance,
+                                Rewriter *RT,
+                                RewriteUtils *Helper,
+                                const CXXRecordDecl *CXXRD,
+                                const std::string &Name)
     : CommonRenameClassRewriteVisitor<RemoveBaseClassRewriteVisitor>
-      (RT, Helper, CXXRD, Name)
+      (Instance, RT, Helper, CXXRD, Name)
   { }
 };
 
@@ -102,7 +103,7 @@ void RemoveBaseClass::HandleTranslationUnit(ASTContext &Ctx)
   Ctx.getDiagnostics().setSuppressAllDiagnostics(false);
 
   RewriteVisitor = 
-    new RemoveBaseClassRewriteVisitor(&TheRewriter, RewriteHelper, 
+    new RemoveBaseClassRewriteVisitor(this, &TheRewriter, RewriteHelper,
                                       TheBaseClass->getCanonicalDecl(),
                                       TheDerivedClass->getNameAsString());
 
diff --git a/clang_delta/RenameClass.cpp b/clang_delta/RenameClass.cpp
index 8a316ce..3cb463f 100644
--- a/clang_delta/RenameClass.cpp
+++ b/clang_delta/RenameClass.cpp
@@ -51,15 +51,16 @@ private:
 };
 
 class RenameClassRewriteVisitor : public 
-  CommonRenameClassRewriteVisitor<RenameClassRewriteVisitor> 
+  CommonRenameClassRewriteVisitor<RenameClassRewriteVisitor>
 {
 public:
-  RenameClassRewriteVisitor(Rewriter *RT, 
+  RenameClassRewriteVisitor(Transformation *Instance,
+                            Rewriter *RT,
                             RewriteUtils *Helper,
                             const CXXRecordDecl *CXXRD,
                             const std::string &Name)
     : CommonRenameClassRewriteVisitor<RenameClassRewriteVisitor>
-      (RT, Helper, CXXRD, Name)
+      (Instance, RT, Helper, CXXRD, Name)
   { }
 };
 
@@ -101,7 +102,7 @@ void RenameClass::HandleTranslationUnit(ASTContext &Ctx)
   Ctx.getDiagnostics().setSuppressAllDiagnostics(false);
 
   RewriteVisitor = 
-    new RenameClassRewriteVisitor(&TheRewriter, RewriteHelper, 
+    new RenameClassRewriteVisitor(this, &TheRewriter, RewriteHelper,
                                   TheCXXRecordDecl, NewNameStr);
 
   TransAssert(RewriteVisitor && "NULL RewriteVisitor!");
diff --git a/clang_delta/ReplaceDerivedClass.cpp b/clang_delta/ReplaceDerivedClass.cpp
index 9d865c0..11d3376 100644
--- a/clang_delta/ReplaceDerivedClass.cpp
+++ b/clang_delta/ReplaceDerivedClass.cpp
@@ -49,12 +49,13 @@ class ReplaceDerivedClassRewriteVisitor : public
   CommonRenameClassRewriteVisitor<ReplaceDerivedClassRewriteVisitor> 
 {
 public:
-  ReplaceDerivedClassRewriteVisitor(Rewriter *RT, 
+  ReplaceDerivedClassRewriteVisitor(Transformation *Instance,
+                                    Rewriter *RT,
                                     RewriteUtils *Helper,
                                     const CXXRecordDecl *CXXRD,
                                     const std::string &Name)
     : CommonRenameClassRewriteVisitor<ReplaceDerivedClassRewriteVisitor>
-      (RT, Helper, CXXRD, Name)
+      (Instance, RT, Helper, CXXRD, Name)
   { }
 };
 
@@ -93,7 +94,7 @@ void ReplaceDerivedClass::HandleTranslationUnit(ASTContext &Ctx)
   Ctx.getDiagnostics().setSuppressAllDiagnostics(false);
 
   RewriteVisitor = 
-    new ReplaceDerivedClassRewriteVisitor(&TheRewriter, RewriteHelper, 
+    new ReplaceDerivedClassRewriteVisitor(this, &TheRewriter, RewriteHelper, 
                                           TheDerivedClass->getCanonicalDecl(),
                                           TheBaseClass->getNameAsString());
   TransAssert(RewriteVisitor && "NULL RewriteVisitor!");
@@ -177,7 +178,9 @@ void ReplaceDerivedClass::doRewrite(void)
     RewriteHelper->removeClassTemplateDecls(TmplD);
   }
   else {
-    RewriteHelper->removeClassDecls(TheDerivedClass);
+    if (!isDeclaringRecordDecl(TheDerivedClass)) {
+      RewriteHelper->removeClassDecls(TheDerivedClass);
+    }
   }
 }
 
diff --git a/clang_delta/RewriteUtils.cpp b/clang_delta/RewriteUtils.cpp
index 129f184..895cf89 100644
--- a/clang_delta/RewriteUtils.cpp
+++ b/clang_delta/RewriteUtils.cpp
@@ -1026,6 +1026,21 @@ bool RewriteUtils::replaceRecordDeclName(const RecordDecl *RD,
                                    NameStr);
 }
 
+bool RewriteUtils::replaceRecordDeclDef(const RecordDecl *RD,
+                                        const std::string &NameStr)
+{
+  if (RD->isThisDeclarationADefinition()) {
+    SourceLocation RBLoc = RD->getBraceRange().getEnd();
+    if (RBLoc.isInvalid()) {
+      return !TheRewriter->ReplaceText(RD->getSourceRange(), NameStr);
+    }
+    else {
+      SourceLocation StartLoc = RD->getSourceRange().getBegin();
+      return !TheRewriter->ReplaceText(SourceRange(StartLoc, RBLoc), NameStr);
+    }
+  }
+}
+
 bool RewriteUtils::replaceVarTypeName(const VarDecl *VD,
                                       const std::string &NameStr)
 {
diff --git a/clang_delta/RewriteUtils.h b/clang_delta/RewriteUtils.h
index 05e212e..986349a 100644
--- a/clang_delta/RewriteUtils.h
+++ b/clang_delta/RewriteUtils.h
@@ -127,6 +127,9 @@ public:
   bool replaceRecordDeclName(const clang::RecordDecl *RD,
                              const std::string &NameStr);
 
+  bool replaceRecordDeclDef(const clang::RecordDecl *RD,
+                            const std::string &NameStr);
+
   bool replaceVarTypeName(const clang::VarDecl *VD,
                           const std::string &NameStr);
 
diff --git a/clang_delta/Transformation.cpp b/clang_delta/Transformation.cpp
index 29a7c33..9fa9cb1 100644
--- a/clang_delta/Transformation.cpp
+++ b/clang_delta/Transformation.cpp
@@ -1076,6 +1076,17 @@ bool Transformation::isInIncludedFile(const Stmt *S) const
   return isInIncludedFile(S->getLocStart());
 }
 
+bool Transformation::isDeclaringRecordDecl(const RecordDecl *RD)
+{
+  SourceLocation SemiLoc =
+    Lexer::findLocationAfterToken(RD->getSourceRange().getEnd(),
+                                  tok::semi,
+                                  *SrcManager,
+                                  Context->getLangOpts(),
+                                  /*SkipTrailingWhitespaceAndNewLine=*/true);
+  return SemiLoc.isInvalid();
+}
+
 Transformation::~Transformation(void)
 {
   RewriteUtils::Finalize();
diff --git a/clang_delta/Transformation.h b/clang_delta/Transformation.h
index 55d692b..c1aff47 100644
--- a/clang_delta/Transformation.h
+++ b/clang_delta/Transformation.h
@@ -57,8 +57,17 @@ typedef enum {
   TransToCounterTooBigError
 } TransformationError;
 
+namespace clang_delta_common_visitor {
+
+template<typename T> class CommonRenameClassRewriteVisitor;
+
+}
+
 class Transformation : public clang::ASTConsumer {
 
+template<typename T>
+friend class clang_delta_common_visitor::CommonRenameClassRewriteVisitor;
+
 public:
 
   Transformation(const char *TransName, const char *Desc)
@@ -290,6 +299,8 @@ protected:
 
   bool isInIncludedFile(const clang::Stmt *S) const;
 
+  bool isDeclaringRecordDecl(const clang::RecordDecl *RD);
+
   const std::string Name;
 
   int TransformationCounter;
diff --git a/clang_delta/tests/replace-derived-class/replace-derived1.cpp b/clang_delta/tests/replace-derived-class/replace-derived1.cpp
new file mode 100644
index 0000000..b20cff2
--- /dev/null
+++ b/clang_delta/tests/replace-derived-class/replace-derived1.cpp
@@ -0,0 +1,15 @@
+// RUN: %clang_delta --transformation=replace-derived-class --counter=1 %s 2>&1 | %remove_lit_checks | FileCheck %s
+
+struct a {
+  ~a();
+};
+// CHECK-NOT: struct X
+struct X : a {};
+// CHECK: foo() {
+void foo() {
+// CHECK-NEXT: a *b;
+   X *b;
+// CHECK-NEXT: b->~a();
+   b->~X();
+// CHECK-NEXT: }
+}
diff --git a/clang_delta/tests/replace-derived-class/replace-derived2.cpp b/clang_delta/tests/replace-derived-class/replace-derived2.cpp
new file mode 100644
index 0000000..7311ba7
--- /dev/null
+++ b/clang_delta/tests/replace-derived-class/replace-derived2.cpp
@@ -0,0 +1,16 @@
+// RUN: %clang_delta --transformation=replace-derived-class --counter=1 %s 2>&1 | %remove_lit_checks | FileCheck %s
+
+// CHECK: struct a {
+struct a {
+// CHECK-NEXT: ~a();
+  ~a();
+// CHECK-NEXT: };
+};
+// CHECK-NEXT: a *b;
+struct X : a {} *b;
+// CHECK-NEXT: void foo() {
+void foo() {
+// CHECK-NEXT: b->~a();
+  b->~X();
+// CHECK-NEXT: }
+}
diff --git a/clang_delta/tests/replace-derived-class/replace-derived3.cpp b/clang_delta/tests/replace-derived-class/replace-derived3.cpp
new file mode 100644
index 0000000..f6756af
--- /dev/null
+++ b/clang_delta/tests/replace-derived-class/replace-derived3.cpp
@@ -0,0 +1,16 @@
+// RUN: %clang_delta --transformation=replace-derived-class --counter=1 %s 2>&1 | %remove_lit_checks | FileCheck %s
+
+// CHECK: struct a {
+struct a {
+// CHECK-NEXT: ~a();
+  ~a();
+// CHECK-NEXT: };
+};
+// CHECK-NEXT: a *b;
+struct abcabcabcabcabcabcabca : a {} *b;
+// CHECK-NEXT: void foo() { 
+void foo() {
+// CHECK-NEXT: b->~a();
+   b->~abcabcabcabcabcabcabca();
+// CHECK-NEXT: }
+}
-- 
2.21.0

